{
	"info": {
		"_postman_id": "6ccbe013-f79e-4ed6-824b-524011f47857",
		"name": "Capability: AuthN Authority",
		"description": "This collection automates the creation of the Connection(s) needed in PingOne to enable PingOne MFA.\nThose details are used to configure the PF IK.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PingOne",
			"item": [
				{
					"name": "Get Management Token",
					"item": [
						{
							"name": "Get Worker token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Access Token received\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    response = pm.response.json();",
											"    pm.environment.set(\"access_token\", response.access_token);",
											"    //console.log(\"Access Token: \", atob((response.access_token).split(\".\")[1]));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{adminWorkerSecret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{adminWorkerId}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{pingOneAuthNURL}}/{{adminEnvId}}/as/token",
									"host": [
										"{{pingOneAuthNURL}}"
									],
									"path": [
										"{{adminEnvId}}",
										"as",
										"token"
									]
								},
								"description": "Use the Env PingPlatform app to get a token"
							},
							"response": []
						}
					],
					"description": "Get token to make Management API calls. \n\nWorker App needs same rights as the Admin User. "
				},
				{
					"name": "Get Env Details",
					"item": [
						{
							"name": "Get Org Info",
							"item": [
								{
									"name": "Get OrgId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Org Retrieved\", function () {",
													"    pm.response.to.be.success;",
													"",
													"    response = pm.response.json();",
													"    pm.environment.set(\"orgId\", response._embedded.organizations[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/organizations",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"organizations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organization Assignable Licenses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Licenses Retrieved\", function () {",
													"    pm.response.to.be.success;",
													"",
													"    response = pm.response.json();",
													"",
													"    // Locate the MFA license -- PF needs at least this",
													"    // Other licenses added via My Ping",
													"    licenses = response.assignableLicenses;",
													"    //mfaLicense = licenses.find(license => {return license.name.endsWith(\"TRIAL\")});",
													"    license = licenses.find(license => {return license.name.endsWith(\"INTERNAL\")})",
													"    pm.environment.set(\"licenseId\", license.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/organizations/{{orgId}}/capabilities",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"organizations",
												"{{orgId}}",
												"capabilities"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Organization Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Org Retrieved\", function () {",
													"    pm.response.to.be.success;",
													"",
													"    response = pm.response.json();",
													"    roles = (response._embedded.roles);",
													"    pm.environment.set(\"envRoleId\", roles.filter(orgRole => orgRole.name === \"Environment Admin\")[0].id);",
													"    pm.environment.set(\"identityRoleId\", roles.filter(orgRole => orgRole.name === \"Identity Data Admin\")[0].id);",
													"    pm.environment.set(\"clientRoleId\", roles.filter(orgRole => orgRole.name === \"Client Application Developer\")[0].id);",
													"    //console.log(\"identityRoleId: \", pm.environment.get(\"identityRoleId\"));",
													"    //console.log(\"clientRoleId: \", pm.environment.get(\"clientRoleId\"));",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/roles",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"roles"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Modify Environment",
							"item": [
								{
									"name": "Locate Environment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Env Created\", function () {",
													"    pm.response.to.be.success;",
													"",
													"    response = pm.response.json();",
													"    env = response._embedded.environments.find(envs => {return envs.name == pm.environment.get(\"envName\")})",
													"    pm.environment.set(\"envDetails\", env);",
													"    pm.environment.set(\"envId\", env.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/environments",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"environments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Env Bill of Materials",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"BOM Retrieved\", function () {",
													"    pm.response.to.be.success;",
													"",
													"    response = pm.response.json();",
													"    pm.environment.set(\"bom\", response.products);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/environments/{{envId}}/billOfMaterials",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"environments",
												"{{envId}}",
												"billOfMaterials"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add PF to Env BOM",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"BOM Modified\", function () {",
													"    pm.response.to.be.success;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"products = pm.environment.get(\"bom\")",
													"pfConsoleURL = pm.environment.get(\"pfConsoleURL\");",
													"",
													"products.push({ \"type\": \"PING_FEDERATE\", \"console\": { \"href\": pfConsoleURL + \":443\\/pingfederate\\/app\" } });",
													"pm.environment.set(\"products\", JSON.stringify(products))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"products\": {{products}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/environments/{{envId}}/billOfMaterials",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"environments",
												"{{envId}}",
												"billOfMaterials"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Default Population",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Default Pop located\", function () {",
													"    pm.response.to.be.success;",
													"",
													"    response = pm.response.json();",
													"    pop = response._embedded.populations.find(pops => {return pops.name == \"Default\"})",
													"    pm.environment.set(\"popId\", pop.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/environments/{{envId}}/populations",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"environments",
												"{{envId}}",
												"populations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Env Resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OIDC Resources Retrieved\", function () {",
													"    pm.response.to.be.success;",
													"",
													"    response = pm.response.json();",
													"    pm.environment.set(\"openidResourceId\", response._embedded.resources.find(resource => {return resource.name == \"openid\"}).id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/environments/{{envId}}/resources",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"environments",
												"{{envId}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get OIDC Resources",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OIDC Resources Retrieved\", function () {",
													"    pm.response.to.be.success;",
													"",
													"    response = pm.response.json();",
													"    openidResourceId = response._embedded.resources.find(resource => {return resource.name == \"openid\"}).id",
													"    //console.log(openidResourceId);",
													"    pm.environment.set(\"openidResourceId\", openidResourceId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/environments/{{envId}}/resources",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"environments",
												"{{envId}}",
												"resources"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get OIDC `profile` Scope ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"OIDC Scope Retrieved\", function () {",
													"    pm.response.to.be.success;",
													"",
													"    response = pm.response.json();",
													"    profileScopeId = response._embedded.scopes.find(scope => {return scope.name == \"profile\"}).id",
													"    //console.log(profileScopeId);",
													"    pm.environment.set(\"profileScopeId\", profileScopeId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/environments/{{envId}}/resources/{{openidResourceId}}/scopes",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"environments",
												"{{envId}}",
												"resources",
												"{{openidResourceId}}",
												"scopes"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Add Software `redirect_uri` to Admin SSO Client",
							"item": [
								{
									"name": "Get Admin SSO client details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"App Retrieved\", function () {",
													"    pm.response.to.be.success;",
													"",
													"    response = pm.response.json();",
													"    pm.environment.set(\"appDetails\", response);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/environments/{{adminEnvId}}/applications/{{pfLogonAppId}}",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"environments",
												"{{adminEnvId}}",
												"applications",
												"{{pfLogonAppId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Modify redirectURIs",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"appDetails = pm.environment.get(\"appDetails\");",
													"pfConsoleURL = pm.environment.get(\"pfConsoleURL\");",
													"if (!appDetails.redirectUris) {",
													"    appDetails[\"redirectUris\"] = Array (pfConsoleURL + \":443\\/pingfederate\\/app?service=finishsso\");",
													"} else {",
													"    appDetails[\"redirectUris\"].push(pfConsoleURL + \":443\\/pingfederate\\/app?service=finishsso\");",
													"}",
													"pm.environment.set(\"appDetails\", JSON.stringify(appDetails));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Org Retrieved\", function () {",
													"    pm.response.to.be.success;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{{appDetails}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pingOneMgmtURL}}/v1/environments/{{adminEnvId}}/applications/{{pfLogonAppId}}",
											"host": [
												"{{pingOneMgmtURL}}"
											],
											"path": [
												"v1",
												"environments",
												"{{adminEnvId}}",
												"applications",
												"{{pfLogonAppId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create PingOne Connections",
							"item": [
								{
									"name": "API Worker App (Legacy)",
									"item": [
										{
											"name": "Create Ping Platform Worker",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"App Created\", function () {",
															"    pm.response.to.be.success;",
															"",
															"    response = pm.response.json();",
															"    pm.environment.set(\"pfWorkerId\", response.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Ping Platform App\",\n    \"enabled\": true,\n    \"type\": \"WORKER\",\n    \"protocol\": \"OPENID_CONNECT\",\n    \"tags\": [\n        \"PING_FED_CONNECTION_INTEGRATION\"\n    ],\n    \"grantTypes\": [\n        \"CLIENT_CREDENTIALS\"\n    ],\n    \"tokenEndpointAuthMethod\": \"CLIENT_SECRET_BASIC\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pingOneMgmtURL}}/v1/environments/{{envId}}/applications",
													"host": [
														"{{pingOneMgmtURL}}"
													],
													"path": [
														"v1",
														"environments",
														"{{envId}}",
														"applications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Role - Identity Admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Role Added\", function () {",
															"    pm.response.to.be.success;",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"role\": {\n        \"id\": \"{{identityRoleId}}\"\n    },\n    \"scope\": {\n        \"id\": \"{{envId}}\",\n        \"type\": \"ENVIRONMENT\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pingOneMgmtURL}}/v1/environments/{{envId}}/applications/{{pfWorkerId}}/roleAssignments",
													"host": [
														"{{pingOneMgmtURL}}"
													],
													"path": [
														"v1",
														"environments",
														"{{envId}}",
														"applications",
														"{{pfWorkerId}}",
														"roleAssignments"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get App secret",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Secret Received\", function () {",
															"    pm.response.to.be.success;",
															"",
															"    response = pm.response.json();",
															"    pm.environment.set(\"pfWorkerSecret\", response.secret);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{pingOneMgmtURL}}/v1/environments/{{envId}}/applications/{{pfWorkerId}}/secret",
													"host": [
														"{{pingOneMgmtURL}}"
													],
													"path": [
														"v1",
														"environments",
														"{{envId}}",
														"applications",
														"{{pfWorkerId}}",
														"secret"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PingOne Gateway",
									"item": [
										{
											"name": "Create PingFederate Connection",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Connection Created\", function () {",
															"    pm.response.to.be.success;",
															"",
															"    response = pm.response.json();",
															"    pm.environment.set(\"pfGatewayId\", response.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"PingFederate\",\n    \"enabled\": true,\n    \"type\": \"PING_FEDERATE\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pingOneMgmtURL}}/v1/environments/{{envId}}/gateways",
													"host": [
														"{{pingOneMgmtURL}}"
													],
													"path": [
														"v1",
														"environments",
														"{{envId}}",
														"gateways"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create PingFederate Connection Credential",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"App Created\", function () {",
															"    pm.response.to.be.success;",
															"",
															"    response = pm.response.json();",
															"    pm.environment.set(\"pfGatewayCred\", response.credential);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"PingFederate Connection\",\n    \"enabled\": true,\n    \"type\": \"PING_FEDERATE\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pingOneMgmtURL}}/v1/environments/{{envId}}/gateways/{{pfGatewayId}}/credentials",
													"host": [
														"{{pingOneMgmtURL}}"
													],
													"path": [
														"v1",
														"environments",
														"{{envId}}",
														"gateways",
														"{{pfGatewayId}}",
														"credentials"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"description": "Calls to create the Environment and components:\n\n* Environment\n  * License - MFA TRIAL\n* Population - Default\n  * Used for provisioned Users from PF\n* Connections\n  * Ping Platform Worker\n  * Native App - MFA\n",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "PingFed",
			"item": [
				{
					"name": "Configure Policies with Fragments",
					"item": [
						{
							"name": "Add Fragment Policy Contracts",
							"item": [
								{
									"name": "Create Policy Contract - Subject Only",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Fragment Created\", function () {",
													"    pm.response.to.be.success;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{pfAdminPwd}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{pfAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"value": "pingfederate"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpLWFkbWluOjJGZWRlcmF0ZU0wcmU="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    {\n      \"id\": \"FragmentSubject\",\n      \"name\": \"Fragment - Subject Only\",\n      \"coreAttributes\": [\n        {\n          \"name\": \"subject\"\n        }\n      ],\n      \"extendedAttributes\": []\n    }"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationPolicyContracts",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicyContracts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Policy Contract - CIAM Form",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Fragment Created\", function () {",
													"    pm.response.to.be.success;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{pfAdminPwd}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{pfAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"value": "pingfederate"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpLWFkbWluOjJGZWRlcmF0ZU0wcmU="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"FragmentCIAMForm\",\n    \"name\": \"Fragment - CIAM Form\",\n    \"coreAttributes\": [\n        {\n            \"name\": \"subject\"\n        }\n    ],\n    \"extendedAttributes\": [\n        {\n            \"name\": \"entryUUID\"\n        },\n        {\n            \"name\": \"uid\"\n        },\n        {\n            \"name\": \"mail\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationPolicyContracts",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicyContracts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Add Fragments",
							"item": [
								{
									"name": "Create Fragment - Internal AuthN",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Fragment Created\", function () {",
													"    pm.response.to.be.success;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{pfAdminPwd}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{pfAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"value": "pingfederate"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpLWFkbWluOjJGZWRlcmF0ZU0wcmU="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"InternalAuthN\",\n    \"name\": \"Internal AuthN\",\n    \"description\": \"Used for Internal Authentication\",\n    \"rootNode\": {\n        \"action\": {\n            \"type\": \"AUTHN_SOURCE\",\n            \"authenticationSource\": {\n                \"type\": \"IDP_ADAPTER\",\n                \"sourceRef\": {\n                    \"id\": \"HTMLForm\"\n                }\n            }\n        },\n        \"children\": [\n            {\n                \"action\": {\n                    \"type\": \"DONE\",\n                    \"context\": \"Fail\"\n                }\n            },\n            {\n                \"action\": {\n                    \"type\": \"APC_MAPPING\",\n                    \"context\": \"Success\",\n                    \"authenticationPolicyContractRef\": {\n                        \"id\": \"samplePolicyContract\"\n                    },\n                    \"attributeMapping\": {\n                        \"attributeSources\": [],\n                        \"attributeContractFulfillment\": {\n                            \"ImmutableID\": {\n                                \"source\": {\n                                    \"type\": \"ADAPTER\",\n                                    \"id\": \"HTMLForm\"\n                                },\n                                \"value\": \"entryUUID\"\n                            },\n                            \"mail\": {\n                                \"source\": {\n                                    \"type\": \"ADAPTER\",\n                                    \"id\": \"HTMLForm\"\n                                },\n                                \"value\": \"mail\"\n                            },\n                            \"subject\": {\n                                \"source\": {\n                                    \"type\": \"ADAPTER\",\n                                    \"id\": \"HTMLForm\"\n                                },\n                                \"value\": \"uid\"\n                            },\n                            \"SAML_AUTHN_CTX\": {\n                                \"source\": {\n                                    \"type\": \"TEXT\"\n                                },\n                                \"value\": \"internal\"\n                            }\n                        },\n                        \"issuanceCriteria\": {\n                            \"conditionalCriteria\": []\n                        }\n                    }\n                }\n            }\n        ]\n    },\n    \"inputs\": {\n        \"id\": \"FragmentSubject\"\n    },\n    \"outputs\": {\n        \"id\": \"samplePolicyContract\"\n    }\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationPolicies/fragments",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicies",
												"fragments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Fragment - First_Factor",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Fragment Created\", function () {",
													"    pm.response.to.be.success;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{pfAdminPwd}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{pfAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"value": "pingfederate"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpLWFkbWluOjJGZWRlcmF0ZU0wcmU="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"FirstFactor\",\n    \"name\": \"First_Factor\",\n    \"description\": \"Used for Customer First Factor\",\n    \"rootNode\": {\n        \"action\": {\n            \"type\": \"AUTHN_SOURCE\",\n            \"authenticationSource\": {\n                \"type\": \"IDP_ADAPTER\",\n                \"sourceRef\": {\n                    \"id\": \"ciamHTMLForm\"\n                }\n            },\n            \"attributeRules\": {\n                \"items\": [\n                    {\n                        \"attributeName\": \"policy.action\",\n                        \"condition\": \"EQUALS_CASE_INSENSITIVE\",\n                        \"expectedValue\": \"identity.registration\",\n                        \"result\": \"Register\"\n                    }\n                ],\n                \"fallbackToSuccess\": true\n            }\n        },\n        \"children\": [\n            {\n                \"action\": {\n                    \"type\": \"DONE\",\n                    \"context\": \"Fail\"\n                }\n            },\n            {\n                \"action\": {\n                    \"type\": \"LOCAL_IDENTITY_MAPPING\",\n                    \"context\": \"Register\",\n                    \"localIdentityRef\": {\n                        \"id\": \"regIdentityProfile\"\n                    },\n                    \"inboundMapping\": {\n                        \"attributeSources\": [],\n                        \"attributeContractFulfillment\": {},\n                        \"issuanceCriteria\": {\n                            \"conditionalCriteria\": []\n                        }\n                    },\n                    \"outboundAttributeMapping\": {\n                        \"attributeSources\": [],\n                        \"attributeContractFulfillment\": {\n                            \"ImmutableID\": {\n                                \"source\": {\n                                    \"type\": \"LOCAL_IDENTITY_PROFILE\",\n                                    \"id\": \"regIdentityProfile\"\n                                },\n                                \"value\": \"ImmutableID\"\n                            },\n                            \"mail\": {\n                                \"source\": {\n                                    \"type\": \"LOCAL_IDENTITY_PROFILE\",\n                                    \"id\": \"regIdentityProfile\"\n                                },\n                                \"value\": \"email\"\n                            },\n                            \"subject\": {\n                                \"source\": {\n                                    \"type\": \"LOCAL_IDENTITY_PROFILE\",\n                                    \"id\": \"regIdentityProfile\"\n                                },\n                                \"value\": \"username\"\n                            },\n                            \"SAML_AUTHN_CTX\": {\n                                \"source\": {\n                                    \"type\": \"TEXT\"\n                                },\n                                \"value\": \"registered\"\n                            }\n                        },\n                        \"issuanceCriteria\": {\n                            \"conditionalCriteria\": []\n                        }\n                    }\n                }\n            },\n            {\n                \"action\": {\n                    \"type\": \"LOCAL_IDENTITY_MAPPING\",\n                    \"context\": \"Success\",\n                    \"localIdentityRef\": {\n                        \"id\": \"regIdentityProfile\"\n                    },\n                    \"inboundMapping\": {\n                        \"attributeSources\": [],\n                        \"attributeContractFulfillment\": {\n                            \"pf.local.identity.unique.id\": {\n                                \"source\": {\n                                    \"type\": \"ADAPTER\",\n                                    \"id\": \"ciamHTMLForm\"\n                                },\n                                \"value\": \"uid\"\n                            }\n                        },\n                        \"issuanceCriteria\": {\n                            \"conditionalCriteria\": []\n                        }\n                    },\n                    \"outboundAttributeMapping\": {\n                        \"attributeSources\": [],\n                        \"attributeContractFulfillment\": {\n                            \"ImmutableID\": {\n                                \"source\": {\n                                    \"type\": \"LOCAL_IDENTITY_PROFILE\",\n                                    \"id\": \"regIdentityProfile\"\n                                },\n                                \"value\": \"ImmutableID\"\n                            },\n                            \"mail\": {\n                                \"source\": {\n                                    \"type\": \"ADAPTER\",\n                                    \"id\": \"ciamHTMLForm\"\n                                },\n                                \"value\": \"mail\"\n                            },\n                            \"subject\": {\n                                \"source\": {\n                                    \"type\": \"ADAPTER\",\n                                    \"id\": \"ciamHTMLForm\"\n                                },\n                                \"value\": \"username\"\n                            },\n                            \"SAML_AUTHN_CTX\": {\n                                \"source\": {\n                                    \"type\": \"TEXT\"\n                                },\n                                \"value\": \"single_factor\"\n                            }\n                        },\n                        \"issuanceCriteria\": {\n                            \"conditionalCriteria\": []\n                        }\n                    }\n                }\n            }\n        ]\n    },\n    \"inputs\": {\n        \"id\": \"FragmentSubject\"\n    },\n    \"outputs\": {\n        \"id\": \"samplePolicyContract\"\n    }\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationPolicies/fragments",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicies",
												"fragments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Replace Policy with Fragments",
							"item": [
								{
									"name": "Replace Sample AuthN Policy with Fragments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Policy Created\", function () {",
													"    pm.response.to.be.success;",
													"    pm.environment.set(\"authPolicy\", pm.response.json());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{pfAdminPwd}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{pfAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"value": "pingfederate"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpLWFkbWluOjJGZWRlcmF0ZU0wcmU="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"failIfNoSelection\": false,\n    \"authnSelectionTrees\": [\n        {\n            \"rootNode\": {\n                \"action\": {\n                    \"type\": \"AUTHN_SELECTOR\",\n                    \"authenticationSelectorRef\": {\n                        \"id\": \"authnExp\"\n                    }\n                },\n                \"children\": [\n                    {\n                        \"action\": {\n                            \"type\": \"FRAGMENT\",\n                            \"context\": \"Internal\",\n                            \"fragment\": {\n                                \"id\": \"InternalAuthN\"\n                            },\n                            \"fragmentMapping\": {\n                                \"attributeSources\": [],\n                                \"attributeContractFulfillment\": {\n                                    \"subject\": {\n                                        \"source\": {\n                                            \"type\": \"NO_MAPPING\"\n                                        }\n                                    }\n                                },\n                                \"issuanceCriteria\": {\n                                    \"conditionalCriteria\": []\n                                }\n                            }\n                        },\n                        \"children\": [\n                            {\n                                \"action\": {\n                                    \"type\": \"DONE\",\n                                    \"context\": \"Fail\"\n                                }\n                            },\n                            {\n                                \"action\": {\n                                    \"type\": \"DONE\",\n                                    \"context\": \"Success\"\n                                }\n                            }\n                        ]\n                    },\n                    {\n                        \"action\": {\n                            \"type\": \"FRAGMENT\",\n                            \"context\": \"Single_Factor\",\n                            \"fragment\": {\n                                \"id\": \"FirstFactor\"\n                            },\n                            \"fragmentMapping\": {\n                                \"attributeSources\": [],\n                                \"attributeContractFulfillment\": {\n                                    \"subject\": {\n                                        \"source\": {\n                                            \"type\": \"NO_MAPPING\"\n                                        }\n                                    }\n                                },\n                                \"issuanceCriteria\": {\n                                    \"conditionalCriteria\": []\n                                }\n                            }\n                        },\n                        \"children\": [\n                            {\n                                \"action\": {\n                                    \"type\": \"DONE\",\n                                    \"context\": \"Fail\"\n                                }\n                            },\n                            {\n                                \"action\": {\n                                    \"type\": \"DONE\",\n                                    \"context\": \"Success\"\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"name\": \"Sample Authentication Experiences\",\n            \"description\": \"This Sample Policy uses the Extended Properties Selector on the Application to allow easy switching between:\\r\\n* Single_Factor (First_Factor Fragment)\\r\\n* Internal (Employee HTML Form)\",\n            \"enabled\": true\n        },\n        {\n            \"rootNode\": {\n                \"action\": {\n                    \"type\": \"FRAGMENT\",\n                    \"fragment\": {\n                        \"id\": \"FirstFactor\"\n                    },\n                    \"fragmentMapping\": {\n                        \"attributeSources\": [],\n                        \"attributeContractFulfillment\": {\n                            \"subject\": {\n                                \"source\": {\n                                    \"type\": \"NO_MAPPING\"\n                                }\n                            }\n                        },\n                        \"issuanceCriteria\": {\n                            \"conditionalCriteria\": []\n                        }\n                    }\n                },\n                \"children\": [\n                    {\n                        \"action\": {\n                            \"type\": \"DONE\",\n                            \"context\": \"Fail\"\n                        }\n                    },\n                    {\n                        \"action\": {\n                            \"type\": \"DONE\",\n                            \"context\": \"Success\"\n                        }\n                    }\n                ]\n            },\n            \"name\": \"Fallback Policy\",\n            \"description\": \"Used to perform authentication if other Policies are not invoked\",\n            \"enabled\": true\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationPolicies/default",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicies",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "Mirror Sample AuthN Policy with API",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let authPolicy = pm.environment.get(\"authPolicy\");",
													"let samplePolicyChildren = authPolicy.authnSelectionTrees[0].rootNode.children",
													"",
													"let apiPolicy = ",
													"        {",
													"            \"rootNode\": {",
													"                \"action\": {",
													"                    \"type\": \"AUTHN_SELECTOR\",",
													"                    \"authenticationSelectorRef\": {",
													"                        \"id\": \"useAuthApi\"",
													"                    }",
													"                },",
													"                \"children\": [",
													"                    {",
													"                        \"action\": {",
													"                            \"type\": \"AUTHN_SELECTOR\",",
													"                            \"context\": \"Y\",",
													"                            \"authenticationSelectorRef\": {",
													"                                \"id\": \"authnExp\"",
													"                        }",
													"                    },",
													"                    \"children\": samplePolicyChildren ",
													"                    },",
													"                    {",
													"                        \"action\": {",
													"                            \"type\": \"CONTINUE\",",
													"                            \"context\": \"No Match\"",
													"                        }",
													"                    }",
													"                ]",
													"            },",
													"            \"name\": \"Sample AuthN API\",",
													"            \"description\": \"Mirrors the Sample AuthN Experiences with the Authentication API.\\r\\nSet the `useAuthnAPI` Extended Property to \\\"Y\\\"\",",
													"            \"enabled\": true,",
													"            \"authenticationApiApplicationRef\": {",
													"                \"id\": \"sampleAuthNAPIApp\"",
													"            }",
													"        }",
													"",
													"authPolicy.authnSelectionTrees.unshift(apiPolicy)",
													"pm.environment.set(\"authPolicy\", JSON.stringify(authPolicy))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Fragment Created\", function () {",
													"    pm.response.to.be.success;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{pfAdminPwd}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{pfAdmin}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"value": "pingfederate"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpLWFkbWluOjJGZWRlcmF0ZU0wcmU="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{authPolicy}}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationPolicies/default",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicies",
												"default"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Policy Selectors (Extended Properties)",
							"item": [
								{
									"name": "Create Extended Property Selector - AuthN Exp",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Extended Property Selector Created\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"type": "text",
												"value": "pingfederate"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"authnExp\",\n    \"name\": \"Sample - AuthN Experiences\",\n    \"pluginDescriptorRef\": {\n        \"id\": \"com.pingidentity.pf.selectors.ExtendedPropertyAuthnSelector\"\n    },\n    \"configuration\": {\n        \"tables\": [],\n        \"fields\": [\n            {\n                \"name\": \"Extended Property\",\n                \"value\": \"authNexp\"\n            }\n        ]\n    },\n    \"attributeContract\": {\n        \"extendedAttributes\": [\n            {\n                \"name\": \"Single_Factor\"\n            },\n            {\n                \"name\": \"Internal\"\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationSelectors",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationSelectors"
											]
										},
										"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=ndr1564002987357.html"
									},
									"response": []
								},
								{
									"name": "Create Extended Property Selector - Use AuthN API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Extended Property Selector Created\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-XSRF-Header",
												"value": "pingfederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"useAuthApi\",\n    \"name\": \"Enabled AuthN API\",\n    \"pluginDescriptorRef\": {\n        \"id\": \"com.pingidentity.pf.selectors.ExtendedPropertyAuthnSelector\"\n    },\n    \"configuration\": {\n        \"tables\": [],\n        \"fields\": [\n            {\n                \"name\": \"Extended Property\",\n                \"value\": \"useAuthApi\"\n            },\n            {\n                \"name\": \"Case-Sensitive Matching\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"Enable 'No Match' Result Value\",\n                \"value\": \"true\"\n            }\n        ]\n    },\n    \"attributeContract\": {\n        \"extendedAttributes\": [\n            {\n                \"name\": \"Y\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationSelectors",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationSelectors"
											]
										},
										"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=ndr1564002987357.html\n\nThis is needed to allow a separate AuthN Policy branch that can be AuthN API Enabled"
									},
									"response": []
								},
								{
									"name": "Create Extended Properties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Extended Property Created\", function () {",
													"    pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "X-XSRF-Header",
												"type": "text",
												"value": "pingfederate"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"items\": [\n    {\n      \"name\": \"authNexp\",\n      \"description\": \"Authentication Experience\",\n      \"multiValued\": \"false\"\n    },\n    {\n      \"name\": \"useAuthApi\",\n      \"description\": \"Use the AuthN API\",\n      \"multiValued\": \"false\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/extendedProperties",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"extendedProperties"
											]
										},
										"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=uut1564002974579.html"
									},
									"response": []
								}
							],
							"description": "These calls are used to modify the AuthN Policies from PF-Base:\n\n\n* Default AuthN Experiences (Extended Property Selector)\n * `Basic` -- HTML Form with LIP (with Identity Registration)\n * `MFA` -- HTML Form with LIP --> PingID SDK\n * `Passwordless` -- ID-First --> PingID SDK\n* Default AuthN API (Extended Properties Selector)\n * Authentication API enabled\n * `API` -- ID-First --> HTML Form with LIP \n * Fallback Policy\n* Used to catch anything without a Ext Prop (like Profile Management)\n * HTML Form with LIP\n* Forgot Password\n * Allows SSPR to use the PID SDK Adapter \n\n\n\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Add Sample Connections",
							"item": [
								{
									"name": "Create SP Connections",
									"item": [
										{
											"name": "SAML",
											"item": [
												{
													"name": "Add SP Connection",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"SAML SP Connection Created\", function () {",
																	"    pm.response.to.have.status(\"Created\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "X-XSRF-Header",
																"value": "pingfederate",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"type\": \"SP\",\n    \"id\": \"Sample-SAML\",\n    \"name\": \"Sample SAML\",\n    \"entityId\": \"Sample-SAML\",\n    \"active\": true,\n    \"contactInfo\": {},\n    \"loggingMode\": \"STANDARD\",\n    \"virtualEntityIds\": [],\n    \"licenseConnectionGroup\": \"\",\n    \"credentials\": {\n        \"certs\": [],\n        \"signingSettings\": {\n            \"signingKeyPairRef\": {\n                \"id\": \"signing-cert\"\n            },\n            \"includeCertInSignature\": false,\n            \"includeRawKeyInSignature\": false,\n            \"algorithm\": \"SHA256withRSA\"\n        }\n    },\n    \"extendedProperties\": {\n        \"authNexp\": {\n            \"values\": [\n                \"Single_Factor\"\n            ]\n        }\n    },\n    \"spBrowserSso\": {\n        \"protocol\": \"SAML20\",\n        \"enabledProfiles\": [\n            \"IDP_INITIATED_SSO\"\n        ],\n        \"alwaysSignArtifactResponse\": false,\n        \"ssoServiceEndpoints\": [\n            {\n                \"binding\": \"POST\",\n                \"url\": \"https://cprice-decoder.glitch.me/saml\",\n                \"isDefault\": true,\n                \"index\": 0\n            }\n        ],\n        \"signAssertions\": false,\n        \"signResponseAsRequired\": true,\n        \"spSamlIdentityMapping\": \"STANDARD\",\n        \"requireSignedAuthnRequests\": false,\n        \"assertionLifetime\": {\n            \"minutesBefore\": 5,\n            \"minutesAfter\": 5\n        },\n        \"encryptionPolicy\": {\n            \"encryptAssertion\": false,\n            \"encryptSloSubjectNameId\": false,\n            \"sloSubjectNameIDEncrypted\": false,\n            \"encryptedAttributes\": []\n        },\n        \"attributeContract\": {\n            \"coreAttributes\": [\n                {\n                    \"name\": \"SAML_SUBJECT\",\n                    \"nameFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"\n                }\n            ],\n            \"extendedAttributes\": [\n                {\n                    \"name\": \"ImmutableID\",\n                    \"nameFormat\": \"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n                },\n                {\n                    \"name\": \"mail\",\n                    \"nameFormat\": \"urn:oasis:names:tc:SAML:2.0:attrname-format:basic\"\n                }\n            ]\n        },\n        \"adapterMappings\": [],\n        \"authenticationPolicyContractAssertionMappings\": [\n            {\n                \"attributeSources\": [],\n                \"attributeContractFulfillment\": {\n                    \"ImmutableID\": {\n                        \"source\": {\n                            \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n                        },\n                        \"value\": \"ImmutableID\"\n                    },\n                    \"mail\": {\n                        \"source\": {\n                            \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n                        },\n                        \"value\": \"mail\"\n                    },\n                    \"SAML_SUBJECT\": {\n                        \"source\": {\n                            \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n                        },\n                        \"value\": \"subject\"\n                    }\n                },\n                \"issuanceCriteria\": {\n                    \"conditionalCriteria\": []\n                },\n                \"authenticationPolicyContractRef\": {\n                    \"id\": \"samplePolicyContract\"\n                },\n                \"restrictVirtualEntityIds\": false,\n                \"restrictedVirtualEntityIds\": [],\n                \"abortSsoTransactionAsFailSafe\": false\n            }\n        ]\n    },\n    \"applicationName\": \"Sample-SAML\",\n    \"connectionTargetType\": \"STANDARD\"\n}"
														},
														"url": {
															"raw": "{{pfAdminURL}}/pf-admin-api/v1/idp/spConnections",
															"host": [
																"{{pfAdminURL}}"
															],
															"path": [
																"pf-admin-api",
																"v1",
																"idp",
																"spConnections"
															]
														},
														"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=ikr1564002999528.html\n\nDummy SP Connection -- sends you to https://httpbin.org/anything"
													},
													"response": []
												}
											]
										},
										{
											"name": "OIDC",
											"item": [
												{
													"name": "Scope Management",
													"item": [
														{
															"name": "Common OIDC Scopes",
															"item": [
																{
																	"name": "OIDC Scope - openid",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Scope (openid) Created\", function () {",
																					"    pm.response.to.have.status(\"Created\");",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "X-XSRF-Header",
																				"value": "pingfederate",
																				"type": "text"
																			},
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"openid\",\n  \"description\": \"Logon to your account\",\n  \"dynamic\": \"false\"\n}"
																		},
																		"url": {
																			"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/commonScopes",
																			"host": [
																				"{{pfAdminURL}}"
																			],
																			"path": [
																				"pf-admin-api",
																				"v1",
																				"oauth",
																				"authServerSettings",
																				"scopes",
																				"commonScopes"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "OIDC Scope - address",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Scope (address) Created\", function () {",
																					"    pm.response.to.have.status(\"Created\");",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "X-XSRF-Header",
																				"type": "text",
																				"value": "pingfederate"
																			},
																			{
																				"key": "Content-Type",
																				"value": "application/json",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"address\",\n  \"description\": \"Used to access your postal address\",\n  \"dynamic\": \"false\"\n}"
																		},
																		"url": {
																			"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/commonScopes",
																			"host": [
																				"{{pfAdminURL}}"
																			],
																			"path": [
																				"pf-admin-api",
																				"v1",
																				"oauth",
																				"authServerSettings",
																				"scopes",
																				"commonScopes"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "OIDC Scope - email",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Scope (email) Created\", function () {",
																					"    pm.response.to.have.status(\"Created\");",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "X-XSRF-Header",
																				"type": "text",
																				"value": "pingfederate"
																			},
																			{
																				"key": "Content-Type",
																				"type": "text",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"email\",\n  \"description\": \"Used to access your email address\",\n  \"dynamic\": \"false\"\n}"
																		},
																		"url": {
																			"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/commonScopes",
																			"host": [
																				"{{pfAdminURL}}"
																			],
																			"path": [
																				"pf-admin-api",
																				"v1",
																				"oauth",
																				"authServerSettings",
																				"scopes",
																				"commonScopes"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "OIDC Scope - phone",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Scope (phone) Created\", function () {",
																					"    pm.response.to.have.status(\"Created\");",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "X-XSRF-Header",
																				"type": "text",
																				"value": "pingfederate"
																			},
																			{
																				"key": "Content-Type",
																				"type": "text",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"phone\",\n  \"description\": \"Used to access your phone number\",\n  \"dynamic\": \"false\"\n}"
																		},
																		"url": {
																			"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/commonScopes",
																			"host": [
																				"{{pfAdminURL}}"
																			],
																			"path": [
																				"pf-admin-api",
																				"v1",
																				"oauth",
																				"authServerSettings",
																				"scopes",
																				"commonScopes"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "OIDC Scope - profile",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Scope (profile) Created\", function () {",
																					"    pm.response.to.have.status(\"Created\");",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "X-XSRF-Header",
																				"type": "text",
																				"value": "pingfederate"
																			},
																			{
																				"key": "Content-Type",
																				"type": "text",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"profile\",\n  \"description\": \"Used to access your profile\",\n  \"dynamic\": \"false\"\n}"
																		},
																		"url": {
																			"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/commonScopes",
																			"host": [
																				"{{pfAdminURL}}"
																			],
																			"path": [
																				"pf-admin-api",
																				"v1",
																				"oauth",
																				"authServerSettings",
																				"scopes",
																				"commonScopes"
																			]
																		}
																	},
																	"response": []
																}
															],
															"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=rbk1564002990993.html\n\nCreates the basic OIDC Scopes:\n\n* openid\n* address\n* email\n* phone\n* profile"
														},
														{
															"name": "Exclusive OAuth Scopes",
															"item": [
																{
																	"name": "OAuth Scope - urn:pingidentity:scim",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Scope (openid) Created\", function () {",
																					"    pm.response.to.have.status(\"Created\");",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "X-XSRF-Header",
																				"type": "text",
																				"value": "pingfederate"
																			},
																			{
																				"key": "Content-Type",
																				"type": "text",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"urn:pingidentity:scim\",\n  \"description\": \"Used to authenticate to the PD SCIMv2 API\",\n  \"dynamic\": \"false\"\n}"
																		},
																		"url": {
																			"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/exclusiveScopes",
																			"host": [
																				"{{pfAdminURL}}"
																			],
																			"path": [
																				"pf-admin-api",
																				"v1",
																				"oauth",
																				"authServerSettings",
																				"scopes",
																				"exclusiveScopes"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "OAuth Scope - urn:pingidentity:directory",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Scope (openid) Created\", function () {",
																					"    pm.response.to.have.status(\"Created\");",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "X-XSRF-Header",
																				"type": "text",
																				"value": "pingfederate"
																			},
																			{
																				"key": "Content-Type",
																				"type": "text",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"urn:pingidentity:directory\",\n  \"description\": \"Used to authenticate to the PD Directory API\",\n  \"dynamic\": \"false\"\n}"
																		},
																		"url": {
																			"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings/scopes/exclusiveScopes",
																			"host": [
																				"{{pfAdminURL}}"
																			],
																			"path": [
																				"pf-admin-api",
																				"v1",
																				"oauth",
																				"authServerSettings",
																				"scopes",
																				"exclusiveScopes"
																			]
																		}
																	},
																	"response": []
																}
															],
															"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=rbk1564002990993.html\n\nCreates the basic OIDC Scopes:\n\n* openid\n* address\n* email\n* phone\n* profile",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"type": "text/javascript",
																		"exec": [
																			""
																		]
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"type": "text/javascript",
																		"exec": [
																			""
																		]
																	}
																}
															]
														}
													],
													"description": "Creates a base set of scopes for OIDC and Ping integrations"
												},
												{
													"name": "Create OIDC Clients",
													"item": [
														{
															"name": "Create OIDC Client (PingLogon)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"OIDC Client Created\", function () {",
																			"    pm.response.to.have.status(\"Created\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	},
																	{
																		"key": "X-XSRF-Header",
																		"type": "text",
																		"value": "pingfederate"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"clientId\": \"PingLogon\",\n  \"enabled\": true,\n  \"redirectUris\": [\n    \"https://cprice-decoder.glitch.me/oidc\",\n    \"https://httpbin.org/anything\"\n  ],\n  \"grantTypes\": [\n    \"IMPLICIT\",\n    \"AUTHORIZATION_CODE\"\n  ],\n  \"name\": \"Ping Logon\",\n  \"description\": \"This client is used to perform OIDC logons\",\n  \"logoUrl\": \"\",\n  \"refreshRolling\": \"SERVER_DEFAULT\",\n  \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n  \"persistentGrantExpirationTime\": 0,\n  \"persistentGrantExpirationTimeUnit\": \"DAYS\",\n  \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n  \"persistentGrantIdleTimeout\": 0,\n  \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n  \"bypassApprovalPage\": true,\n  \"allowAuthenticationApiInit\": false,\n  \"restrictScopes\": false,\n  \"restrictedScopes\": [],\n  \"exclusiveScopes\": [],\n  \"restrictedResponseTypes\": [],\n  \"defaultAccessTokenManagerRef\": {\n    \"id\": \"\"\n  },\n  \"validateUsingAllEligibleAtms\": false,\n  \"oidcPolicy\": {\n    \"policyGroup\": {\n      \"id\": \"\"\n    },\n    \"grantAccessSessionRevocationApi\": true,\n    \"grantAccessSessionSessionManagementApi\": true,\n    \"pingAccessLogoutCapable\": false,\n    \"pairwiseIdentifierUserType\": false\n  },\n  \"clientAuth\": {\n    \"type\": \"SECRET\",\n    \"secret\": \"{{globalPwd}}\",\n    \"enforceReplayPrevention\": false\n  },\n  \"extendedParameters\": {\n    \"authNexp\": {\n      \"values\": [\n        \"Single_Factor\"\n      ]\n    }\n  },\n  \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n  \"requireProofKeyForCodeExchange\": false,\n  \"requireSignedRequests\": false\n}"
																},
																"url": {
																	"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/clients",
																	"host": [
																		"{{pfAdminURL}}"
																	],
																	"path": [
																		"pf-admin-api",
																		"v1",
																		"oauth",
																		"clients"
																	]
																},
																"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=roj1564002966901.html\n\nThis client can be used to demonstrate OIDC User AuthN (Authz Code \\ Implicit) flows"
															},
															"response": []
														},
														{
															"name": "Create OIDC Client (PingRedirectless)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"OIDC Client Created\", function () {",
																			"    pm.response.to.have.status(\"Created\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	},
																	{
																		"key": "X-XSRF-Header",
																		"type": "text",
																		"value": "pingfederate"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"clientId\": \"PingRedirectless\",\n  \"enabled\": true,\n  \"redirectUris\": [\n    \"https://cprice-decoder.glitch.me/oidc\"\n  ],\n  \"grantTypes\": [\n    \"IMPLICIT\",\n    \"AUTHORIZATION_CODE\"\n  ],\n  \"name\": \"Ping Redirectless\",\n  \"description\": \"This client is used to perform 1st Party AuthN API authentications\",\n  \"logoUrl\": \"\",\n  \"refreshRolling\": \"SERVER_DEFAULT\",\n  \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n  \"persistentGrantExpirationTime\": 0,\n  \"persistentGrantExpirationTimeUnit\": \"DAYS\",\n  \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n  \"persistentGrantIdleTimeout\": 0,\n  \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n  \"bypassApprovalPage\": true,\n  \"allowAuthenticationApiInit\": true,\n  \"restrictScopes\": true,\n  \"restrictedScopes\": [\n    \"openid\",\n    \"address\",\n    \"email\",\n    \"phone\",\n    \"profile\"\n  ],\n  \"exclusiveScopes\": [],\n  \"restrictedResponseTypes\": [],\n  \"defaultAccessTokenManagerRef\": {\n    \"id\": \"\"\n  },\n  \"validateUsingAllEligibleAtms\": false,\n  \"oidcPolicy\": {\n    \"policyGroup\": {\n      \"id\": \"\"\n    },\n    \"grantAccessSessionRevocationApi\": true,\n    \"grantAccessSessionSessionManagementApi\": true,\n    \"pingAccessLogoutCapable\": false,\n    \"pairwiseIdentifierUserType\": false\n  },\n  \"clientAuth\": {\n    \"type\": \"SECRET\",\n    \"secret\": \"{{globalPwd}}\",\n    \"enforceReplayPrevention\": false\n  },\n  \"extendedParameters\": {\n    \"authNexp\": {\n      \"values\": [\n        \"Single_Factor\"\n      ]\n    }\n  },\n  \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n  \"requireProofKeyForCodeExchange\": false,\n  \"requireSignedRequests\": false\n}"
																},
																"url": {
																	"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/clients",
																	"host": [
																		"{{pfAdminURL}}"
																	],
																	"path": [
																		"pf-admin-api",
																		"v1",
																		"oauth",
																		"clients"
																	]
																},
																"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=roj1564002966901.html\n\nThis client can be used to demonstrate OIDC User AuthN (Authz Code \\ Implicit) flows"
															},
															"response": []
														},
														{
															"name": "Create OIDC Client (CIAM Mobile Push)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"OIDC Client Created\", function () {",
																			"    pm.response.to.have.status(\"Created\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	},
																	{
																		"key": "X-XSRF-Header",
																		"type": "text",
																		"value": "pingfederate"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n      \"clientId\": \"ciamMobileApp\",\n      \"enabled\": true,\n      \"redirectUris\": [\n        \"com.pingidentity.developer.appauth://oidc_callback\",\n        \"pingonesdk://sample\"\n      ],\n      \"grantTypes\": [\n        \"IMPLICIT\",\n        \"AUTHORIZATION_CODE\",\n        \"CIBA\"\n      ],\n      \"name\": \"CIAM Mobile App\",\n      \"description\": \"This client is used to perform OIDC logons with a Mobile App with CIAM Push capabilities\",\n      \"logoUrl\": \"\",\n      \"refreshRolling\": \"SERVER_DEFAULT\",\n      \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n      \"persistentGrantExpirationTime\": 0,\n      \"persistentGrantExpirationTimeUnit\": \"DAYS\",\n      \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n      \"persistentGrantIdleTimeout\": 0,\n      \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n      \"bypassApprovalPage\": true,\n      \"restrictScopes\": false,\n      \"restrictedScopes\": [],\n      \"exclusiveScopes\": [\n      ],\n      \"restrictedResponseTypes\": [],\n      \"defaultAccessTokenManagerRef\": {\n        \"id\": \"\"\n      },\n      \"validateUsingAllEligibleAtms\": false,\n      \"oidcPolicy\": {\n        \"policyGroup\": {\n          \"id\": \"\"\n        },\n        \"grantAccessSessionRevocationApi\": false,\n        \"pingAccessLogoutCapable\": false,\n        \"pairwiseIdentifierUserType\": false\n      },\n      \"clientAuth\": {\n        \"type\": \"NONE\",\n        \"enforceReplayPrevention\": false\n      },\n      \"extendedParameters\": {\n    \t\"authNexp\": {\n        \t\"values\": [\n        \t\t\"Multi_Factor\"\n          ]\n        }\n      },\n      \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n      \"requireProofKeyForCodeExchange\": false,\n      \"requireSignedRequests\": false\n    }"
																},
																"url": {
																	"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/clients",
																	"host": [
																		"{{pfAdminURL}}"
																	],
																	"path": [
																		"pf-admin-api",
																		"v1",
																		"oauth",
																		"clients"
																	]
																},
																"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=roj1564002966901.html\n\nThis client can be used to issue tokens for a PingID SDK Mobile App"
															},
															"response": []
														},
														{
															"name": "Create OIDC Client (PingAdmin)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"OIDC Client Created\", function () {",
																			"    pm.response.to.have.status(\"Created\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	},
																	{
																		"key": "X-XSRF-Header",
																		"type": "text",
																		"value": "pingfederate"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n      \"clientId\": \"PingAdmin\",\n      \"enabled\": true,\n      \"redirectUris\": [\n        \"{{pfBaseURL}}/pingfederate/app?service=finishsso\"\n      ],\n      \"grantTypes\": [\n        \"IMPLICIT\",\n        \"AUTHORIZATION_CODE\"\n      ],\n      \"name\": \"Ping Admin\",\n      \"description\": \"This client is used to perform OIDC SSO logon to Ping Admin consoles\",\n      \"logoUrl\": \"\",\n      \"refreshRolling\": \"SERVER_DEFAULT\",\n      \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n      \"persistentGrantExpirationTime\": 0,\n      \"persistentGrantExpirationTimeUnit\": \"DAYS\",\n      \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n      \"persistentGrantIdleTimeout\": 0,\n      \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n      \"bypassApprovalPage\": true,\n      \"allowAuthenticationApiInit\": false,\n      \"restrictScopes\": false,\n      \"restrictedScopes\": [],\n      \"exclusiveScopes\": [\n      ],\n      \"restrictedResponseTypes\": [],\n      \"defaultAccessTokenManagerRef\": {\n        \"id\": \"\"\n      },\n      \"validateUsingAllEligibleAtms\": false,\n      \"oidcPolicy\": {\n        \"policyGroup\": {\n          \"id\": \"adminOIDCPolicy\"\n        },\n        \"grantAccessSessionRevocationApi\": true,\n        \"grantAccessSessionSessionManagementApi\": true,\n        \"pingAccessLogoutCapable\": false,\n        \"pairwiseIdentifierUserType\": false\n      },\n      \"clientAuth\": {\n        \"type\": \"SECRET\",\n        \"secret\": \"{{globalPwd}}\",\n        \"enforceReplayPrevention\": false\n      },\n      \"extendedParameters\": {\n    \t\"authNexp\": {\n        \t\"values\": [\n        \t\t\"Internal\"\n          ]\n        }\n      },\n      \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n      \"requireProofKeyForCodeExchange\": false,\n      \"requireSignedRequests\": false\n    }"
																},
																"url": {
																	"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/clients",
																	"host": [
																		"{{pfAdminURL}}"
																	],
																	"path": [
																		"pf-admin-api",
																		"v1",
																		"oauth",
																		"clients"
																	]
																},
																"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=roj1564002966901.html\n\nThis client can be used to demonstrate OIDC User AuthN (Authz Code \\ Implicit) flows"
															},
															"response": []
														},
														{
															"name": "Create OIDC Client (PingServices)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"OAuth Client Created\", function () {",
																			"    pm.response.to.have.status(\"Created\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	},
																	{
																		"key": "X-XSRF-Header",
																		"type": "text",
																		"value": "pingfederate"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"clientId\": \"PingServices\",\n    \"enabled\": true,\n    \"redirectUris\": [],\n    \"grantTypes\": [\n        \"CLIENT_CREDENTIALS\"\n    ],\n    \"name\": \"Ping Services\",\n    \"description\": \"This client is used by Services to ask for API Tokens (Client_Credentials)\",\n    \"refreshRolling\": \"SERVER_DEFAULT\",\n    \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n    \"persistentGrantExpirationTime\": 0,\n    \"persistentGrantExpirationTimeUnit\": \"DAYS\",\n    \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n    \"persistentGrantIdleTimeout\": 0,\n    \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n    \"bypassApprovalPage\": true,\n    \"restrictScopes\": false,\n    \"restrictedScopes\": [],\n    \"exclusiveScopes\": [\n        \"urn:pingidentity:directory\",\n        \"urn:pingidentity:scim\"\n    ],\n    \"restrictedResponseTypes\": [],\n    \"defaultAccessTokenManagerRef\": {\n        \"id\": \"\"\n    },\n    \"validateUsingAllEligibleAtms\": false,\n    \"oidcPolicy\": {\n        \"grantAccessSessionRevocationApi\": false,\n        \"pingAccessLogoutCapable\": false,\n        \"pairwiseIdentifierUserType\": false\n    },\n    \"clientAuth\": {\n        \"type\": \"SECRET\",\n        \"secret\": \"{{globalPwd}}\",\n        \"enforceReplayPrevention\": false\n    },\n    \"extendedParameters\": {\n        \"authNexp\": {}\n    },\n    \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n    \"requireProofKeyForCodeExchange\": false,\n    \"requireSignedRequests\": false\n}"
																},
																"url": {
																	"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/clients",
																	"host": [
																		"{{pfAdminURL}}"
																	],
																	"path": [
																		"pf-admin-api",
																		"v1",
																		"oauth",
																		"clients"
																	]
																},
																"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=roj1564002966901.html\n\nThis client can be used to Introspect `access_token`"
															},
															"response": []
														},
														{
															"name": "Create OIDC Client (PingIntrospect)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"OAuth Client Created\", function () {",
																			"    pm.response.to.have.status(\"Created\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"name": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	},
																	{
																		"key": "X-XSRF-Header",
																		"type": "text",
																		"value": "pingfederate"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n      \"clientId\": \"PingIntrospect\",\n      \"enabled\": true,\n      \"redirectUris\": [],\n      \"grantTypes\": [\n        \"ACCESS_TOKEN_VALIDATION\"\n      ],\n      \"name\": \"Ping Introspect\",\n      \"description\": \"This client is used to Introspect and validate PF-issued access_tokens\",\n      \"logoUrl\": \"\",\n      \"refreshRolling\": \"SERVER_DEFAULT\",\n      \"persistentGrantExpirationType\": \"SERVER_DEFAULT\",\n      \"persistentGrantExpirationTime\": 0,\n      \"persistentGrantExpirationTimeUnit\": \"DAYS\",\n      \"persistentGrantIdleTimeoutType\": \"SERVER_DEFAULT\",\n      \"persistentGrantIdleTimeout\": 0,\n      \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n      \"bypassApprovalPage\": false,\n      \"restrictScopes\": false,\n      \"restrictedScopes\": [],\n      \"exclusiveScopes\": [],\n      \"restrictedResponseTypes\": [],\n      \"defaultAccessTokenManagerRef\": {\n        \"id\": \"\"\n      },\n      \"validateUsingAllEligibleAtms\": true,\n      \"oidcPolicy\": {\n        \"grantAccessSessionRevocationApi\": false,\n        \"pingAccessLogoutCapable\": false\n      },\n      \"clientAuth\": {\n        \"type\": \"SECRET\",\n        \"secret\": \"2FederateM0re\",\n        \"enforceReplayPrevention\": false\n      },\n      \"extendedParameters\": {},\n      \"deviceFlowSettingType\": \"SERVER_DEFAULT\",\n      \"requireSignedRequests\": false\n    }"
																},
																"url": {
																	"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/clients",
																	"host": [
																		"{{pfAdminURL}}"
																	],
																	"path": [
																		"pf-admin-api",
																		"v1",
																		"oauth",
																		"clients"
																	]
																}
															},
															"response": []
														}
													],
													"description": "Create 2 OIDC Clients\n\n* PingLogon\n * AuthZ Code \\ Implicit\n* PingIntrospect\n * Introspection client",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													]
												}
											]
										},
										{
											"name": "Push Config Replication",
											"item": [
												{
													"name": "Replicate to Cluster node(s)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Config replicated\", function () {",
																	"    pm.response.to.be.ok;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "X-XSRF-Header",
																"type": "text",
																"value": "pingfederate"
															}
														],
														"url": {
															"raw": "{{pfAdminURL}}/pf-admin-api/v1/cluster/replicate",
															"host": [
																"{{pfAdminURL}}"
															],
															"path": [
																"pf-admin-api",
																"v1",
																"cluster",
																"replicate"
															]
														},
														"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=roj1564002966901.html\n\nThis client can be used to demonstrate OIDC User AuthN (Authz Code \\ Implicit) flows"
													},
													"response": []
												}
											]
										}
									],
									"description": "Create SP Connection that does an Authentication --> SAML Assertion to https://httpsbin.org/anything ",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							],
							"description": "Calls to generate a couple of sample applications:\n* SAML\n* OIDC",
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{pfAdminPwd}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{pfAdmin}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Add PingOne Connector",
					"item": [
						{
							"name": "Create PingOne Connection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"PingOne Connector Created\", function () {",
											"    pm.response.to.be.success;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-XSRF-Header",
										"value": "pingfederate"
									},
									{
										"key": "Authorization",
										"value": "Basic YXBpLWFkbWluOjJGZWRlcmF0ZU0wcmU="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"PingOneConnection\",\n    \"name\": \"PingOne Connection\",\n    \"credential\": \"{{pfGatewayCred}}\"\n}"
								},
								"url": {
									"raw": "{{pfAdminURL}}/pf-admin-api/v1/pingOneConnections",
									"host": [
										"{{pfAdminURL}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"pingOneConnections"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Initial Config",
					"item": [
						{
							"name": "Check PF is Running",
							"item": [
								{
									"name": "Check if PF is up",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Checks to see if the server actually responded",
													"if (pm.response.code === 200) {",
													"    pm.test(\"Server is Up\", function () {",
													"        pm.response.to.be.ok;",
													"        postman.setNextRequest(\"00-Start-PF-Base\");",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Tells Newman to repeat this call",
													"postman.setNextRequest(pm.info.requestName);",
													"// Puts a 10 sec delay into this call",
													"setTimeout(function () {",
													"    console.log(\"Connecting to PF: \", pm.variables.get(\"pfAdminURL\"));",
													"}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "X-XSRF-Header",
												"value": "pingfederate",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/license/agreement",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"license",
												"agreement"
											]
										},
										"description": "Uses the API endpoint instead of just the heartbeat"
									},
									"response": []
								},
								{
									"name": "00-Start-PF-Base",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Starting Collection\", function () {",
													"    pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://postman-echo.com/get",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains the call that's used to wait until a desired condition is met.\n\nThe `Pre-request` of the call contains a log event with a timer of 30s. The `Test Script` of the call contains the loop back to this call, and the Condition test that will break the looping.\n\nThe name of the call for the break is `00-Start-PF-Base` -- it's a simple GET request to https://postman-echo.com and allows for this to be always consistent.\n\nThe actual set of API calls for this collection are started right after this GET call.",
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Initial Server Config",
							"item": [
								{
									"name": "Start PF Config",
									"item": [
										{
											"name": "Get BaseDN from PD",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"BaseDN retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    ",
															"    var response = pm.response.json();",
															"    pm.environment.set(\"userBaseDN\", response.publicBaseDNs[0])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{pdAdminPwd}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{pdAdmin}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pdAdminUrl}}/directory/v1",
													"host": [
														"{{pdAdminUrl}}"
													],
													"path": [
														"directory",
														"v1"
													]
												},
												"description": "Gets the `userbaseDN` that was used to create the PD instance"
											},
											"response": []
										},
										{
											"name": "Accept EULA",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"EULA Accepted\", function () {",
															"    pm.response.to.be.ok;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "X-XSRF-Header",
														"value": "pingfederate",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"accepted\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/license/agreement",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"license",
														"agreement"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Create API Admin Account",
									"item": [
										{
											"name": "Create initial API Admin Account",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"API Admin account created\", function () {",
															"    pm.response.to.be.ok;",
															"",
															"    // `encryptedPassword` needed to Update Account Later",
															"    var response = pm.response.json();",
															"    pm.environment.set(\"encryptedPassword\", response.encryptedPassword);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-XSRF-Header",
														"type": "text",
														"value": "pingfederate"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"api-admin\",\n    \"password\": \"{{globalPwd}}\",\n    \"active\": \"true\",\n    \"description\": \"Used to perform Admin API calls\",\n    \"roles\": [\n        \"USER_ADMINISTRATOR\",\n        \"CRYPTO_ADMINISTRATOR\",\n        \"ADMINISTRATOR\"\n    ]\n}"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/administrativeAccounts",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"administrativeAccounts"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=uwm1564002973007.html"
											},
											"response": []
										},
										{
											"name": "Check Version",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Version retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    var response = pm.response.json();",
															"",
															"    // Split the Version into numbers",
															"    var version = response.version.split(\".\");",
															"    var major = parseInt(version[0]);",
															"    var minor = parseInt(version[1]);",
															"    // Combine into a single number (makes the comparison easier)",
															"    var currentVersion = Number(major + minor / 10);",
															"",
															"    // Check to see if EXPRESSION_ADMIN is needed (v10.1+)",
															"    if (currentVersion >= 10.1) {",
															"        console.log(\"PF v10.1+ Detected\");",
															"        var pfAdminRoles = \"[ \\\"USER_ADMINISTRATOR\\\", \\\"CRYPTO_ADMINISTRATOR\\\", \\\"ADMINISTRATOR\\\", \\\"EXPRESSION_ADMINISTRATOR\\\" ]\";",
															"    }",
															"    else {",
															"        var pfAdminRoles = \"[ \\\"USER_ADMINISTRATOR\\\", \\\"CRYPTO_ADMINISTRATOR\\\", \\\"ADMINISTRATOR\\\" ]\";",
															"    }",
															"    pm.environment.set(\"pfAdminRoles\", pfAdminRoles);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-XSRF-Header",
														"value": "pingfederate",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/version",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"version"
													]
												},
												"description": "Used to detect the running version of PF and makes version dependant changes. \nThere's a Test Script that performs the actions.\n\n* Admin Account Role: 10.1+ needs additional Role"
											},
											"response": []
										},
										{
											"name": "Update API Admin Account with version Roles",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"API Admin account created\", function () {",
															"    pm.response.to.be.ok;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-XSRF-Header",
														"type": "text",
														"value": "pingfederate"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{pfAdmin}}\",\n    \"active\": \"true\",\n    \"description\": \"Used to perform Admin API calls\",\n    \"encryptedPassword\": \"{{encryptedPassword}}\",\n    \"roles\": {{pfAdminRoles}}\n}"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/administrativeAccounts/{{pfAdmin}}",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"administrativeAccounts",
														"{{pfAdmin}}"
													]
												},
												"description": "PF 10.1+ adds a Role that is needed to use the `/config-store` API. \n\nThis call puts the right roles onto the created Admin account"
											},
											"response": []
										}
									],
									"description": "The Solution Profile assumes LDAP for the Admin Console, but the API changes need to be performed **after** PF has started. This means `native` is needed for the API - these calls create that account"
								},
								{
									"name": "Finish Initial Config",
									"item": [
										{
											"name": "Get License",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PF License retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    ",
															"    var response = pm.response.json();",
															"    pm.environment.set(\"wsTrustEnabled\", response.wsTrustEnabled);    ",
															"    pm.environment.set(\"oauthEnabled\", response.oauthEnabled);",
															"    pm.environment.set(\"provisioningEnabled\", response.provisioningEnabled);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-XSRF-Header",
														"value": "pingfederate",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/license",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"license"
													]
												},
												"description": "Used to configure Server Roles that match the license"
											},
											"response": []
										},
										{
											"name": "Server Settings",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Server Settings Configured\", function () {",
															"    pm.response.to.be.ok;",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-XSRF-Header",
														"value": "PingFederate",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"contactInfo\": {\n    \"company\": \"PF Demo\"\n  },\n  \"rolesAndProtocols\": {\n    \"oauthRole\": {\n      \"enableOauth\": {{oauthEnabled}},\n      \"enableOpenIdConnect\": {{oauthEnabled}}\n    },\n    \"idpRole\": {\n      \"enable\": true,\n      \"saml20Profile\": {\n        \"enable\": true,\n        \"enableAutoConnect\": false\n      },\n      \"enableOutboundProvisioning\": {{provisioningEnabled}},\n      \"enableSaml11\": false,\n      \"enableSaml10\": false,\n      \"enableWsFed\": true,\n      \"enableWsTrust\": {{wsTrustEnabled}}\n    },\n    \"spRole\": {\n      \"enable\": true,\n      \"saml20Profile\": {\n        \"enable\": true,\n        \"enableXASP\": false,\n        \"enableAutoConnect\": false\n      },\n      \"enableSaml11\": false,\n      \"enableSaml10\": false,\n      \"enableWsFed\": false,\n      \"enableWsTrust\": false,\n      \"enableOpenIDConnect\": true,\n      \"enableInboundProvisioning\": false\n    },\n    \"enableIdpDiscovery\": false\n  },\n  \"federationInfo\": {\n    \"baseUrl\": \"{{pfBaseURL}}\",\n    \"saml2EntityId\": \"{{pfBaseURL}}\",\n    \"autoConnectEntityId\": \"{{pfBaseURL}}\",\n    \"saml1xIssuerId\": \"{{pfBaseURL}}\",\n    \"wsfedRealm\": \"{{pfBaseURL}}\"\n  }\n}"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/serverSettings",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"serverSettings"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=vko1564002972919.html"
											},
											"response": []
										},
										{
											"name": "Add Signing Cert",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Signing Cert created\", function () {",
															"    pm.response.to.have.status(\"Created\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-XSRF-Header",
														"value": "pingfederate",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"signing-cert\",\n  \"commonName\": \"pingfederate\",\n  \"organization\": \"Ping Identity\",\n  \"country\": \"US\",\n  \"validDays\": \"1825\",\n  \"keyAlgorithm\": \"RSA\",\n  \"keySize\": \"2048\",\n  \"signatureAlgorithm\": \"SHA256withRSA\"\n}"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/keyPairs/signing/generate",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"keyPairs",
														"signing",
														"generate"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=uci1564002984974.html"
											},
											"response": []
										},
										{
											"name": "Add `pingfederate` as Virtual Host Name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Virtual Host Created\", function () {",
															"    pm.response.to.be.ok;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-XSRF-Header",
														"value": "pingfederate",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"virtualHostNames\": [\n    \"pingfederate\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/virtualHostNames",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"virtualHostNames"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=muj1564002974462.html\n\nThis is used to accept backchannel calls from other services in the stack"
											},
											"response": []
										}
									]
								}
							],
							"description": "This folder contains calls to do the initial configuration of the Server:\n\n* Accept the EULA\n* Add Admin account for API calls\n* Match the Roles & Protocols to the installed license\n* Add a Signing Certificate\n* Add Extended Property\n* Add Virtual Host for `pingfederate` to enable any backchannel calls\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "System Config - Datastore \\ Config Store (PD) \\ PD PCV",
							"item": [
								{
									"name": "Create base DataStore",
									"item": [
										{
											"name": "Add Datastore - PD",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"PD Datastore Created\", function () {",
															"    pm.response.to.be.success;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-XSRF-Header",
														"value": "PingFederate",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "    {\n      \"type\": \"LDAP\",\n      \"id\": \"LDAP-PingDirectory\",\n      \"maskAttributeValues\": false,\n      \"hostnames\": [\n        \"{{pdLdapHost}}\"\n      ],\n      \"ldapType\": \"PING_DIRECTORY\",\n      \"bindAnonymously\": false,\n      \"userDN\": \"cn=pingfederate\",\n\t  \"password\": \"{{globalPwd}}\",\n      \"useSsl\": false,\n      \"useDnsSrvRecords\": false,\n      \"name\": \"PingDirectory\",\n      \"testOnBorrow\": false,\n      \"testOnReturn\": false,\n      \"createIfNecessary\": true\n    }"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/dataStores",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"dataStores"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=obh1564002976555.html"
											},
											"response": []
										}
									],
									"description": "Adds PD as a datastore",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Config-Store API",
									"item": [
										{
											"name": "Set PD for OAuth Clients",
											"item": [
												{
													"name": "Set PD for OAuth Clients",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"OAuth Clients in PD\", function () {",
																	"    pm.response.to.be.ok;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/json",
																"type": "text"
															},
															{
																"key": "X-XSRF-Header",
																"value": "pingfederate",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "    {\n      \"id\": \"PingFederateDSJNDIName\",\n      \"type\": \"STRING\",\n      \"stringValue\": \"LDAP-PingDirectory\"\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{pfAdminURL}}/pf-admin-api/v1/configStore/org.sourceid.oauth20.domain.ClientManagerLdapImpl/PingFederateDSJNDIName",
															"host": [
																"{{pfAdminURL}}"
															],
															"path": [
																"pf-admin-api",
																"v1",
																"configStore",
																"org.sourceid.oauth20.domain.ClientManagerLdapImpl",
																"PingFederateDSJNDIName"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set SearchBase for  OAuth Clients",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"OAuth Clients in PD\", function () {",
																	"    pm.response.to.be.ok;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "X-XSRF-Header",
																"type": "text",
																"value": "pingfederate"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"id\": \"SearchBase\",\n    \"type\": \"STRING\",\n    \"stringValue\": \"ou=oauthClients,{{userBaseDN}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{pfAdminURL}}/pf-admin-api/v1/configStore/org.sourceid.oauth20.domain.ClientManagerLdapImpl/SearchBase",
															"host": [
																"{{pfAdminURL}}"
															],
															"path": [
																"pf-admin-api",
																"v1",
																"configStore",
																"org.sourceid.oauth20.domain.ClientManagerLdapImpl",
																"SearchBase"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Set PD for OAuth Grants",
											"item": [
												{
													"name": "Set PD for OAuth Grants",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"OAuth Grants in PD\", function () {",
																	"    pm.response.to.be.ok;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "X-XSRF-Header",
																"type": "text",
																"value": "pingfederate"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "    {\n      \"id\": \"PingFederateDSJNDIName\",\n      \"type\": \"STRING\",\n      \"stringValue\": \"LDAP-PingDirectory\"\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{pfAdminURL}}/pf-admin-api/v1/configStore/org.sourceid.oauth20.token.AccessGrantManagerLDAPPingDirectoryImpl/PingFederateDSJNDIName",
															"host": [
																"{{pfAdminURL}}"
															],
															"path": [
																"pf-admin-api",
																"v1",
																"configStore",
																"org.sourceid.oauth20.token.AccessGrantManagerLDAPPingDirectoryImpl",
																"PingFederateDSJNDIName"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set SearchBase for OAuth Grants",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"OAuth Grants in PD\", function () {",
																	"    pm.response.to.be.ok;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "X-XSRF-Header",
																"type": "text",
																"value": "pingfederate"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"id\": \"SearchBase\",\n    \"type\": \"STRING\",\n    \"stringValue\": \"ou=grants,{{userBaseDN}}\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{pfAdminURL}}/pf-admin-api/v1/configStore/org.sourceid.oauth20.token.AccessGrantManagerLDAPPingDirectoryImpl/SearchBase",
															"host": [
																"{{pfAdminURL}}"
															],
															"path": [
																"pf-admin-api",
																"v1",
																"configStore",
																"org.sourceid.oauth20.token.AccessGrantManagerLDAPPingDirectoryImpl",
																"SearchBase"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Set PD for PF AuthN Sessions",
											"item": [
												{
													"name": "Set PD for Sessions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"PF Sessions in PD\", function () {",
																	"    pm.response.to.be.ok;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "X-XSRF-Header",
																"type": "text",
																"value": "pingfederate"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "    {\n      \"id\": \"PingFederateDSJNDIName\",\n      \"type\": \"STRING\",\n      \"stringValue\": \"LDAP-PingDirectory\"\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{pfAdminURL}}/pf-admin-api/v1/configStore/org.sourceid.saml20.service.session.data.impl.SessionStorageManagerLdapImpl/PingFederateDSJNDIName",
															"host": [
																"{{pfAdminURL}}"
															],
															"path": [
																"pf-admin-api",
																"v1",
																"configStore",
																"org.sourceid.saml20.service.session.data.impl.SessionStorageManagerLdapImpl",
																"PingFederateDSJNDIName"
															]
														}
													},
													"response": []
												},
												{
													"name": "Set SearchBase for Sessions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"PF Sessions in PD\", function () {",
																	"    pm.response.to.be.ok;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "X-XSRF-Header",
																"type": "text",
																"value": "pingfederate"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "    {\n      \"id\": \"SearchBase\",\n      \"type\": \"STRING\",\n      \"stringValue\": \"ou=sessions,{{userBaseDN}}\"\n    }",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{pfAdminURL}}/pf-admin-api/v1/configStore/org.sourceid.saml20.service.session.data.impl.SessionStorageManagerLdapImpl/SearchBase",
															"host": [
																"{{pfAdminURL}}"
															],
															"path": [
																"pf-admin-api",
																"v1",
																"configStore",
																"org.sourceid.saml20.service.session.data.impl.SessionStorageManagerLdapImpl",
																"SearchBase"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Enable OGNL Expressions",
											"item": [
												{
													"name": "Enable OGNL Expressions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"PF Sessions in PD\", function () {",
																	"    pm.response.to.be.ok;",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/json"
															},
															{
																"key": "X-XSRF-Header",
																"type": "text",
																"value": "pingfederate"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"id\": \"evaluateExpressions\",\n    \"type\": \"STRING\",\n    \"stringValue\": \"true\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{pfAdminURL}}/pf-admin-api/v1/configStore/org.sourceid.common.ExpressionManager/evaluateExpressions",
															"host": [
																"{{pfAdminURL}}"
															],
															"path": [
																"pf-admin-api",
																"v1",
																"configStore",
																"org.sourceid.common.ExpressionManager",
																"evaluateExpressions"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Create PD PCV",
									"item": [
										{
											"name": "Get BaseDN from PD",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"BaseDN retrieved\", function () {",
															"    pm.response.to.be.ok;",
															"    ",
															"    var response = pm.response.json();",
															"    pm.environment.set(\"userBaseDN\", response.publicBaseDNs[0])",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "{{pdAdminPwd}}",
															"type": "string"
														},
														{
															"key": "username",
															"value": "{{pdAdmin}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pdAdminUrl}}/directory/v1",
													"host": [
														"{{pdAdminUrl}}"
													],
													"path": [
														"directory",
														"v1"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add Password Credential Validator (LDAP - PD)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"LDAP PCV Created\", function () {",
															"    pm.response.to.have.status(\"Created\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-XSRF-Header",
														"value": "PingFederate",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"PDPCV\",\n  \"name\": \"PD PCV\",\n  \"pluginDescriptorRef\": {\n  \"id\": \"org.sourceid.saml20.domain.LDAPUsernamePasswordCredentialValidator\"\n  },\n  \"configuration\": {\n    \"tables\": [\n      {\n        \"name\": \"Authentication Error Overrides\",\n        \"rows\": []\n      }\n    ],\n    \"fields\": [\n      {\n        \"name\": \"LDAP Datastore\",\n        \"value\": \"LDAP-PingDirectory\"\n      },\n      {\n        \"name\": \"Search Base\",\n        \"value\": \"{{userBaseDN}}\"\n      },\n      {\n        \"name\": \"Search Filter\",\n        \"value\": \"(|(uid=${username})(mail=${username}))\"\n      },\n      {\n        \"name\": \"Scope of Search\",\n        \"value\": \"Subtree\"\n      },\n      {\n        \"name\": \"Case-Sensitive Matching\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Display Name Attribute\",\n        \"value\": \"displayName\"\n      },\n      {\n        \"name\": \"Mail Attribute\",\n        \"value\": \"mail\"\n      },\n      {\n        \"name\": \"SMS Attribute\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"PingID Username Attribute\",\n        \"value\": \"uid\"\n      },\n      {\n        \"name\": \"Mail Search Filter\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Username Attribute\",\n        \"value\": \"uid\"\n      },\n      {\n        \"name\": \"Mail Verified Attribute\",\n        \"value\": \"\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [\n      {\n        \"name\": \"mail\"\n      },\n      {\n        \"name\": \"givenName\"\n      },\n      {\n        \"name\": \"DN\"\n      },\n      {\n        \"name\": \"username\"\n      }\n    ],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"entryUUID\"\n      },\n      {\n        \"name\": \"uid\"\n      }\n    ]\n  }\n}"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/passwordCredentialValidators",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"passwordCredentialValidators"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=obh1564002976555.html"
											},
											"response": []
										}
									]
								},
								{
									"name": "Incoming Proxy Settings",
									"item": [
										{
											"name": "Configure Incoming Proxy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Incoming Proxy Configured\", function () {",
															"    pm.response.to.be.success;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-XSRF-Header",
														"type": "text",
														"value": "PingFederate"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"forwardedIpAddressHeaderName\": \"X-Forwarded-For\",\n  \"forwardedIpAddressHeaderIndex\": \"LAST\",\n  \"proxyTerminatesHttpsConns\": false\n}"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/incomingProxySettings",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"incomingProxySettings"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=obh1564002976555.html"
											},
											"response": []
										}
									]
								}
							],
							"description": "These calls configure the System for PingDirectory for Users and Configuration.\n\nAdds the following:\n\n* Datastore\n* Password Credential Validator\n\nIn the `50-before-post-start.sh` hook (`/pingfed/hooks`) the values in `hivemodule.xml` are swapped out for LDAP providers. The `/config-store` API is then used to configure those providers. \n\nThis enables PD as the store for:  \n\n* OAuth Clients\n* OAuth Grants\n* PF AuthN Sessions\n\n`config-store` API also used to:\n* Enable OGNL Expressions",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "IDP Config",
							"item": [
								{
									"name": "Create AuthN Policy Contracts",
									"item": [
										{
											"name": "Create Sample AuthN Policy Contract",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Policy Contract Created\", function () {",
															"    pm.response.to.be.success;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-XSRF-Header",
														"type": "text",
														"value": "PingFederate"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "    {\n      \"id\": \"samplePolicyContract\",\n      \"name\": \"Sample Policy Contract\",\n      \"coreAttributes\": [\n        {\n          \"name\": \"subject\"\n        }\n      ],\n      \"extendedAttributes\": [\n        {\n          \"name\": \"ImmutableID\"\n        },\n        {\n          \"name\": \"mail\"\n        },\n        {\n          \"name\": \"SAML_AUTHN_CTX\"\n        }\n      ]\n    }"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationPolicyContracts",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"authenticationPolicyContracts"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=udz1564002989838.html"
											},
											"response": []
										}
									],
									"description": "Different Contracts used to provide different AuthN ceremonies for the Application.\n\nAdd the appropriate Contract to the App Mapping to trigger a different ceremony"
								},
								{
									"name": "Enable IdP AuthN Policies",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"IdP AuthN Policies Enabled\", function () {",
													"    pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enableIdpAuthnSelection\": true,\n  \"enableSpAuthnSelection\": false\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationPolicies/settings",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationPolicies",
												"settings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enable Global AuthN Sessions",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"IdP AuthN Policies Enabled\", function () {",
													"    pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"type": "text",
												"value": "PingFederate"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"enableSessions\": true,\n  \"persistentSessions\": true,\n  \"idleTimeoutMins\": 60,\n  \"idleTimeoutDisplayUnit\": \"MINUTES\",\n  \"maxTimeoutMins\": 480,\n  \"maxTimeoutDisplayUnit\": \"MINUTES\"\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/session/authenticationSessionPolicies/global",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"session",
												"authenticationSessionPolicies",
												"global"
											]
										}
									},
									"response": []
								}
							],
							"description": "Calls to setup the things to be used in the IDP\n\n* PD PCV\n* Default AuthN Policy Contract\n* Extended Property - `authnExp`\n* Extended Property Selector (`Basic` \\ `MFA` \\ `Passwordless`)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "OAuth Config",
							"item": [
								{
									"name": "Configure AS Settings",
									"item": [
										{
											"name": "Configure AS Settings",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"OAuth AS configured\", function () {",
															"    pm.response.to.be.ok;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "X-XSRF-Header",
														"value": "pingfederate",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"authorizationCodeTimeout\": 60,\n  \"authorizationCodeEntropy\": 30,\n  \"persistentGrantIdleTimeout\": 30,\n  \"persistentGrantIdleTimeoutTimeUnit\": \"DAYS\",\n  \"refreshTokenLength\": 42,\n  \"rollRefreshTokenValues\": false,\n  \"refreshRollingInterval\": 0,\n  \"persistentGrantReuseGrantTypes\": [\n    \"IMPLICIT\"\n  ],\n  \"persistentGrantContract\": {\n    \"extendedAttributes\": [],\n    \"coreAttributes\": [\n      {\n        \"name\": \"USER_KEY\"\n      },\n      {\n        \"name\": \"USER_NAME\"\n      }\n    ]\n  },\n  \"bypassAuthorizationForApprovedGrants\": false,\n  \"allowUnidentifiedClientROCreds\": false,\n  \"allowUnidentifiedClientExtensionGrants\": false,\n  \"tokenEndpointBaseUrl\": \"\",\n  \"userAuthorizationUrl\": \"\",\n  \"registeredAuthorizationPath\": \"\",\n  \"pendingAuthorizationTimeout\": 600,\n  \"bypassActivationCodeConfirmation\": false,\n  \"devicePollingInterval\": 5,\n  \"userAuthorizationConsentPageSetting\": \"INTERNAL\",\n  \"atmIdForOAuthGrantManagement\": \"\",\n  \"scopeForOAuthGrantManagement\": \"\",\n  \"allowedOrigins\": [\n  ],\n  \"trackUserSessionsForLogout\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authServerSettings",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"oauth",
														"authServerSettings"
													]
												},
												"description": "Why is this call here?"
											},
											"response": []
										}
									],
									"description": "Add CORS for Delegator"
								},
								{
									"name": "Grant Mapping",
									"item": [
										{
											"name": "Create APC mapping - Sample Policy Contract",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Grant Mapping Created\", function () {",
															"    pm.response.to.have.status(\"Created\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-XSRF-Header",
														"type": "text",
														"value": "pingfederate"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "    {\n      \"attributeSources\": [],\n      \"attributeContractFulfillment\": {\n        \"USER_NAME\": {\n          \"source\": {\n            \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n          },\n          \"value\": \"subject\"\n        },\n        \"USER_KEY\": {\n          \"source\": {\n            \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n          },\n          \"value\": \"ImmutableID\"\n        }\n      },\n      \"issuanceCriteria\": {\n        \"conditionalCriteria\": []\n      },\n      \"authenticationPolicyContractRef\": {\n        \"id\": \"samplePolicyContract\"\n      }\n    }"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/authenticationPolicyContractMappings",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"oauth",
														"authenticationPolicyContractMappings"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=enh1564002993753.html"
											},
											"response": []
										}
									],
									"description": "Configuration of Grant Management\n\n* Default AuthN Policy Contract"
								},
								{
									"name": "Token Managers",
									"item": [
										{
											"name": "Create JWT Token Manager",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Access Token Manager (JWT) Created\", function () {",
															"    pm.response.to.have.status(\"Created\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-XSRF-Header",
														"type": "text",
														"value": "pingfederate"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"jwtSample\",\n  \"name\": \"JWT-Sample\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.pf.access.token.management.plugins.JwtBearerAccessTokenManagementPlugin\"\n  },\n  \"configuration\": {\n    \"tables\": [\n      {\n        \"name\": \"Symmetric Keys\",\n        \"rows\": []\n      },\n      {\n        \"name\": \"Certificates\",\n        \"rows\": []\n      }\n    ],\n    \"fields\": [\n      {\n        \"name\": \"Token Lifetime\",\n        \"value\": \"120\"\n      },\n      {\n        \"name\": \"Use Centralized Signing Key\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"JWS Algorithm\",\n        \"value\": \"RS256\"\n      },\n      {\n        \"name\": \"Active Symmetric Key ID\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Active Signing Certificate Key ID\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWE Algorithm\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWE Content Encryption Algorithm\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Active Symmetric Encryption Key ID\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Asymmetric Encryption Key\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Asymmetric Encryption JWKS URL\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Include Key ID Header Parameter\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Include X.509 Thumbprint Header Parameter\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Default JWKS URL Cache Duration\",\n        \"value\": \"720\"\n      },\n      {\n        \"name\": \"Include JWE Key ID Header Parameter\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Include JWE X.509 Thumbprint Header Parameter\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Client ID Claim Name\",\n        \"value\": \"client_id\"\n      },\n      {\n        \"name\": \"Scope Claim Name\",\n        \"value\": \"scope\"\n      },\n      {\n        \"name\": \"Space Delimit Scope Values\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Issuer Claim Value\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Audience Claim Value\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWT ID Claim Length\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"Access Grant GUID Claim Name\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWKS Endpoint Path\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"JWKS Endpoint Cache Duration\",\n        \"value\": \"720\"\n      },\n      {\n        \"name\": \"Publish Key ID X.509 URL\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Publish Thumbprint X.509 URL\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Expand Scope Groups\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Type Header Value\",\n        \"value\": \"\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"sub\"\n      }\n    ]\n  },\n  \"selectionSettings\": {\n    \"resourceUris\": []\n  },\n  \"accessControlSettings\": {\n    \"restrictClients\": false,\n    \"allowedClients\": []\n  },\n  \"sessionValidationSettings\": {\n    \"checkValidAuthnSession\": false,\n    \"checkSessionRevocationStatus\": false,\n    \"updateAuthnSessionActivity\": false,\n    \"includeSessionId\": false\n  }\n}"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/accessTokenManagers",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"oauth",
														"accessTokenManagers"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=srl1564002994713.html"
											},
											"response": []
										}
									],
									"description": "Configures the OAuth Token Mapping settings\n\n* Adds Default JWT Token Manager (Symmetric Key)\n* Adds AuthN Policy Contract Mapping"
								},
								{
									"name": "Token Mappings",
									"item": [
										{
											"name": "Create Mapping -- AuthN Policy Contract --> JWT Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Access Token Mapping Created\", function () {",
															"    pm.response.to.have.status(\"Created\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-XSRF-Header",
														"type": "text",
														"value": "pingfederate"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"context\": {\n    \"type\": \"AUTHENTICATION_POLICY_CONTRACT\",\n    \"contextRef\": {\n      \"id\": \"samplePolicyContract\"\n    }\n  },\n  \"accessTokenManagerRef\": {\n    \"id\": \"jwtSample\"\n  },\n  \"attributeContractFulfillment\": {\n    \"sub\": {\n      \"source\": {\n        \"type\": \"AUTHENTICATION_POLICY_CONTRACT\"\n      },\n      \"value\": \"ImmutableID\"\n    }\n  }\n}"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/accessTokenMappings",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"oauth",
														"accessTokenMappings"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=jfx1564002995189.html"
											},
											"response": []
										},
										{
											"name": "Create Mapping -- Client Credentials --> JWT Token",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Access Token Mapping Created\", function () {",
															"    pm.response.to.have.status(\"Created\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-XSRF-Header",
														"type": "text",
														"value": "pingfederate"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"attributeSources\": [],\n    \"attributeContractFulfillment\": {\n      \"sub\": {\n        \"source\": {\n          \"type\": \"CONTEXT\"\n        },\n        \"value\": \"ClientId\"\n      }\n    },\n    \"issuanceCriteria\": {\n      \"conditionalCriteria\": []\n    },\n    \"id\": \"client_credentials|jwtSample\",\n    \"context\": {\n      \"type\": \"CLIENT_CREDENTIALS\"\n    },\n    \"accessTokenManagerRef\": {\n      \"id\": \"jwtSample\"\n    }\n}"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/accessTokenMappings",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"oauth",
														"accessTokenMappings"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=jfx1564002995189.html"
											},
											"response": []
										}
									]
								},
								{
									"name": "OIDC Policy",
									"item": [
										{
											"name": "Create OIDC Policy (Default)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"OIDC Policy Created\", function () {",
															"    pm.response.to.have.status(\"Created\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-XSRF-Header",
														"type": "text",
														"value": "pingdfederate"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"sampleFullOIDCPolicy\",\n    \"name\": \"Sample OIDC Policy\",\n    \"idTokenLifetime\": 5,\n    \"attributeContract\": {\n        \"coreAttributes\": [\n            {\n                \"name\": \"sub\"\n            }\n        ],\n        \"extendedAttributes\": [\n            {\n                \"name\": \"zoneinfo\"\n            },\n            {\n                \"name\": \"website\"\n            },\n            {\n                \"name\": \"address.locality\"\n            },\n            {\n                \"name\": \"birthdate\"\n            },\n            {\n                \"name\": \"email_verified\"\n            },\n            {\n                \"name\": \"gender\"\n            },\n            {\n                \"name\": \"profile\"\n            },\n            {\n                \"name\": \"phone_number_verified\"\n            },\n            {\n                \"name\": \"preferred_username\"\n            },\n            {\n                \"name\": \"locale\"\n            },\n            {\n                \"name\": \"given_name\"\n            },\n            {\n                \"name\": \"middle_name\"\n            },\n            {\n                \"name\": \"picture\"\n            },\n            {\n                \"name\": \"address.country\"\n            },\n            {\n                \"name\": \"updated_at\"\n            },\n            {\n                \"name\": \"address.postal_code\"\n            },\n            {\n                \"name\": \"address.region\"\n            },\n            {\n                \"name\": \"nickname\"\n            },\n            {\n                \"name\": \"name\"\n            },\n            {\n                \"name\": \"phone_number\"\n            },\n            {\n                \"name\": \"address.formatted\"\n            },\n            {\n                \"name\": \"family_name\"\n            },\n            {\n                \"name\": \"email\"\n            },\n            {\n                \"name\": \"address.street_address\"\n            }\n        ]\n    },\n    \"attributeMapping\": {\n        \"attributeSources\": [\n            {\n                \"type\": \"LDAP\",\n                \"dataStoreRef\": {\n                    \"id\": \"LDAP-PingDirectory\"\n                },\n                \"id\": \"PD\",\n                \"description\": \"PD\",\n                \"baseDn\": \"{{userBaseDN}}\",\n                \"searchScope\": \"SUBTREE\",\n                \"searchFilter\": \"entryUUID=${sub}\",\n                \"binaryAttributeSettings\": {},\n                \"memberOfNestedGroup\": false\n            }\n        ],\n        \"attributeContractFulfillment\": {\n            \"sub\": {\n                \"source\": {\n                    \"type\": \"TOKEN\"\n                },\n                \"value\": \"sub\"\n            },\n            \"zoneinfo\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"address.locality\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"birthdate\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"gender\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"preferred_username\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"uid\"\n            },\n            \"locale\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"address.country\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"updated_at\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"address.postal_code\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"address.region\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"nickname\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"email\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"mail\"\n            },\n            \"website\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"email_verified\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"profile\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"phone_number_verified\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"given_name\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"givenName\"\n            },\n            \"middle_name\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"picture\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            },\n            \"name\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"cn\"\n            },\n            \"phone_number\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"mobile\"\n            },\n            \"address.formatted\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"postalAddress\"\n            },\n            \"family_name\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"sn\"\n            },\n            \"address.street_address\": {\n                \"source\": {\n                    \"type\": \"NO_MAPPING\"\n                }\n            }\n        },\n        \"issuanceCriteria\": {\n            \"conditionalCriteria\": []\n        }\n    },\n    \"includeSriInIdToken\": false,\n    \"includeUserInfoInIdToken\": false,\n    \"includeSHashInIdToken\": false,\n    \"returnIdTokenOnRefreshGrant\": false,\n    \"accessTokenManagerRef\": {\n        \"id\": \"jwtSample\"\n    },\n    \"scopeAttributeMappings\": {}\n}"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/openIdConnect/policies",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"oauth",
														"openIdConnect",
														"policies"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=dkd1564002996125.html"
											},
											"response": []
										},
										{
											"name": "Create OIDC Policy (Ping Admin Consoles)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"OIDC Policy Created\", function () {",
															"    pm.response.to.have.status(\"Created\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													},
													{
														"key": "X-XSRF-Header",
														"type": "text",
														"value": "pingdfederate"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"adminOIDCPolicy\",\n    \"name\": \"Admin OIDC Policy\",\n    \"idTokenLifetime\": 5,\n    \"attributeContract\": {\n        \"coreAttributes\": [\n            {\n                \"name\": \"sub\"\n            }\n        ],\n        \"extendedAttributes\": [\n            {\n                \"name\": \"pf_admin_roles\"\n            },\n            {\n                \"name\": \"last_name\"\n            },\n            {\n                \"name\": \"pc_admin_roles\"\n            },\n            {\n                \"name\": \"isAdmin\"\n            },\n            {\n                \"name\": \"first_name\"\n            },\n            {\n                \"name\": \"name\"\n            }\n        ]\n    },\n    \"attributeMapping\": {\n        \"attributeSources\": [\n            {\n                \"type\": \"LDAP\",\n                \"dataStoreRef\": {\n                    \"id\": \"LDAP-PingDirectory\"\n                },\n                \"id\": \"PD\",\n                \"description\": \"PD\",\n                \"baseDn\": \"{{userBaseDN}}\",\n                \"searchScope\": \"SUBTREE\",\n                \"searchFilter\": \"entryUUID=${sub}\",\n                \"binaryAttributeSettings\": {},\n                \"memberOfNestedGroup\": false\n            }\n        ],\n        \"attributeContractFulfillment\": {\n            \"pf_admin_roles\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"ubidEntitlement\"\n            },\n            \"sub\": {\n                \"source\": {\n                    \"type\": \"TOKEN\"\n                },\n                \"value\": \"sub\"\n            },\n            \"last_name\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"sn\"\n            },\n            \"pc_admin_roles\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"ubidEntitlement\"\n            },\n            \"isAdmin\": {\n                \"source\": {\n                    \"type\": \"EXPRESSION\"\n                },\n                \"value\": \"#this.get(\\\"ds.PD.isMemberOf\\\").toString().toLowerCase().indexOf(\\\"=administrators,\\\") != -1\"\n            },\n            \"first_name\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"givenName\"\n            },\n            \"name\": {\n                \"source\": {\n                    \"type\": \"LDAP_DATA_STORE\",\n                    \"id\": \"PD\"\n                },\n                \"value\": \"cn\"\n            }\n        },\n        \"issuanceCriteria\": {\n            \"conditionalCriteria\": [\n                {\n                    \"errorResult\": \"Not an Administrator\",\n                    \"source\": {\n                        \"type\": \"MAPPED_ATTRIBUTES\"\n                    },\n                    \"attributeName\": \"isAdmin\",\n                    \"condition\": \"EQUALS_CASE_INSENSITIVE\",\n                    \"value\": \"true\"\n                }\n            ]\n        }\n    },\n    \"includeSriInIdToken\": false,\n    \"includeUserInfoInIdToken\": false,\n    \"includeSHashInIdToken\": false,\n    \"returnIdTokenOnRefreshGrant\": false,\n    \"accessTokenManagerRef\": {\n        \"id\": \"jwtSample\"\n    },\n    \"scopeAttributeMappings\": {}\n}"
												},
												"url": {
													"raw": "{{pfAdminURL}}/pf-admin-api/v1/oauth/openIdConnect/policies",
													"host": [
														"{{pfAdminURL}}"
													],
													"path": [
														"pf-admin-api",
														"v1",
														"oauth",
														"openIdConnect",
														"policies"
													]
												},
												"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=dkd1564002996125.html\n\nOIDC Policy used for Administrator access - Assigned to things like:\n* `PingAdmin`\n* `Delegator`\n\nOGNL used to determine if the User belongs to an an Administrative Group (`*=Administrators,*`) and applied to Issuance Criteria"
											},
											"response": []
										}
									],
									"description": "Creates a basic OIDC Policy.\n\nContains only the `sub` claim"
								}
							],
							"description": "This folder contains calls to configure the AS Server:\n\n**Scope Management**\n* Common OIDC Scopes\n\n**Grant Mapping**\n* Default AuthN Policy Contract Mapping\n\n**Access Tokens**\n* JWT Access Token Manager\n* Default AuthN Policy Contract Mapping\n\n**OIDC Policy**\n* Default OIDC Policy\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"description": "This collection does a common base config for PingFed - these are leveraged by additional Use Cases.\n\nThe collection assumes a vanilla install of PF and will create an Admin account to be use for these calls.\n\n* Make sure PF is running\n* Initial Configs\n* Configure PD as config store\n* Configure Identity Provider role\n* Configure OAuth Authorization Server role\n",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{pfAdminPwd}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{pfAdmin}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Create CIAM IdP Components",
					"item": [
						{
							"name": "AuthN API Application",
							"item": [
								{
									"name": "Create Sample AuthN API Application",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"AuthN API App Created\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"type": "text",
												"value": "pingfederate"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"sampleAuthNAPIApp\",\n  \"url\": \"{{pfAuthnApiUrl}}\",\n  \"description\": \"When applied to an Authentiction Policy, this Application URL will be sent to the requesting browser to perform the presentation of that User Journey. A flowId will be sent with the URL that can be used to perform the orchestration through the Policy.\",\n  \"additionalAllowedOrigins\": [],\n  \"name\": \"Sample AuthN API Application\"\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationApi/applications",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationApi",
												"applications"
											]
										},
										"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=lrz1564002999175.html"
									},
									"response": []
								},
								{
									"name": "Enable AuthN API",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"AuthN API Enabled\", function () {",
													"    pm.response.to.be.ok;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-XSRF-Header",
												"value": "pingfederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"apiEnabled\": true,\n  \"defaultApplicationRef\": {\n    \"id\": \"\"\n  },\n  \"enableApiDescriptions\": true\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/authenticationApi/settings",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"authenticationApi",
												"settings"
											]
										},
										"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=ldc1564002999116.html"
									},
									"response": []
								}
							],
							"description": "Configure the PF Authentication API",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Create HTML Form (CIAM with Registration)",
							"item": [
								{
									"name": "Create LIP - Registration Identity Profile",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Registration LIP Created\", function () {",
													"    pm.response.to.be.success;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"type": "text",
												"value": "PingFederate"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"regIdentityProfile\",\n    \"name\": \"Registration Identity Profile\",\n    \"apcId\": {\n        \"id\": \"samplePolicyContract\"\n    },\n    \"authSources\": [],\n    \"authSourceUpdatePolicy\": {\n        \"storeAttributes\": false,\n        \"retainAttributes\": false,\n        \"updateAttributes\": false,\n        \"updateInterval\": 7.0\n    },\n    \"registrationConfig\": {\n        \"captchaEnabled\": false,\n        \"templateName\": \"local.identity.registration.html\",\n        \"createAuthnSessionAfterRegistration\": true,\n        \"usernameField\": \"username\",\n        \"thisIsMyDeviceEnabled\": false\n    },\n    \"fieldConfig\": {\n        \"fields\": [\n            {\n                \"type\": \"TEXT\",\n                \"id\": \"firstName\",\n                \"label\": \"First Name\",\n                \"registrationPageField\": true,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": false,\n                    \"Unique ID Field\": false,\n                    \"Mask Log Values\": false\n                },\n                \"defaultValue\": \"\"\n            },\n            {\n                \"type\": \"TEXT\",\n                \"id\": \"lastName\",\n                \"label\": \"Last Name\",\n                \"registrationPageField\": true,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": false,\n                    \"Unique ID Field\": false,\n                    \"Mask Log Values\": false\n                },\n                \"defaultValue\": \"\"\n            },\n            {\n                \"type\": \"TEXT\",\n                \"id\": \"fullName\",\n                \"label\": \"Full Name\",\n                \"registrationPageField\": true,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": false,\n                    \"Unique ID Field\": false,\n                    \"Mask Log Values\": false\n                },\n                \"defaultValue\": \"\"\n            },\n            {\n                \"type\": \"EMAIL\",\n                \"id\": \"email\",\n                \"label\": \"Email Address\",\n                \"registrationPageField\": true,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": true,\n                    \"Unique ID Field\": false,\n                    \"Mask Log Values\": false\n                }\n            },\n            {\n                \"type\": \"PHONE\",\n                \"id\": \"phoneNumber\",\n                \"label\": \"Phone Number\",\n                \"registrationPageField\": true,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": false,\n                    \"Unique ID Field\": false,\n                    \"Mask Log Values\": false\n                }\n            },\n            {\n                \"type\": \"TEXT\",\n                \"id\": \"username\",\n                \"label\": \"Username\",\n                \"registrationPageField\": true,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": true,\n                    \"Unique ID Field\": true,\n                    \"Mask Log Values\": false\n                },\n                \"defaultValue\": \"\"\n            },\n            {\n                \"type\": \"HIDDEN\",\n                \"id\": \"ImmutableID\",\n                \"label\": \"ImmutableID\",\n                \"registrationPageField\": true,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Unique ID Field\": false,\n                    \"Mask Log Values\": false\n                }\n            }\n        ],\n        \"stripSpaceFromUniqueField\": false\n    },\n    \"emailVerificationConfig\": {\n        \"emailVerificationEnabled\": false\n    },\n    \"dataStoreConfig\": {\n        \"type\": \"LDAP\",\n        \"dataStoreRef\": {\n            \"id\": \"LDAP-PingDirectory\"\n        },\n        \"baseDn\": \"ou=People,{{userBaseDN}}\",\n        \"createPattern\": \"uid=${username}\",\n        \"objectClass\": \"inetOrgPerson\",\n        \"auxiliaryObjectClasses\": [\n            \"pf-connected-identities\"\n        ],\n        \"dataStoreMapping\": {\n            \"firstName\": {\n                \"type\": \"LDAP\",\n                \"name\": \"givenName\",\n                \"metadata\": {}\n            },\n            \"lastName\": {\n                \"type\": \"LDAP\",\n                \"name\": \"sn\",\n                \"metadata\": {}\n            },\n            \"phoneNumber\": {\n                \"type\": \"LDAP\",\n                \"name\": \"mobile\",\n                \"metadata\": {}\n            },\n            \"ImmutableID\": {\n                \"type\": \"LDAP\",\n                \"name\": \"entryUUID\",\n                \"metadata\": {}\n            },\n            \"fullName\": {\n                \"type\": \"LDAP\",\n                \"name\": \"cn\",\n                \"metadata\": {}\n            },\n            \"email\": {\n                \"type\": \"LDAP\",\n                \"name\": \"mail\",\n                \"metadata\": {}\n            },\n            \"username\": {\n                \"type\": \"LDAP\",\n                \"name\": \"uid\",\n                \"metadata\": {}\n            }\n        }\n    },\n    \"profileConfig\": {\n        \"deleteIdentityEnabled\": false,\n        \"templateName\": \"local.identity.profile.html\"\n    },\n    \"registrationEnabled\": true,\n    \"profileEnabled\": true\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/localIdentity/identityProfiles",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"localIdentity",
												"identityProfiles"
											]
										},
										"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=mvi1564003006379.html"
									},
									"response": []
								},
								{
									"name": "Create Adapter - HTML Form with LIP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"HTML Form with LIP Adapter Created\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-XSRF-Header",
												"value": "PingFederate",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"ciamHTMLForm\",\n    \"name\": \"Sample CIAM Form (PF)\",\n    \"pluginDescriptorRef\": {\n        \"id\": \"com.pingidentity.adapters.htmlform.idp.HtmlFormIdpAuthnAdapter\"\n    },\n    \"configuration\": {\n        \"tables\": [\n            {\n                \"name\": \"Credential Validators\",\n                \"rows\": [\n                    {\n                        \"fields\": [\n                            {\n                                \"name\": \"Password Credential Validator Instance\",\n                                \"value\": \"PDPCV\"\n                            }\n                        ],\n                        \"defaultRow\": false\n                    }\n                ]\n            }\n        ],\n        \"fields\": [\n            {\n                \"name\": \"Challenge Retries\",\n                \"value\": \"3\"\n            },\n            {\n                \"name\": \"Session State\",\n                \"value\": \"None\"\n            },\n            {\n                \"name\": \"Session Timeout\",\n                \"value\": \"60\"\n            },\n            {\n                \"name\": \"Session Max Timeout\",\n                \"value\": \"480\"\n            },\n            {\n                \"name\": \"Allow Password Changes\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"Password Management System\",\n                \"value\": \"\"\n            },\n            {\n                \"name\": \"Enable 'Remember My Username'\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"Enable 'This is My Device'\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"Change Password Email Notification\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"Show Password Expiring Warning\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"Password Reset Type\",\n                \"value\": \"NONE\"\n            },\n            {\n                \"name\": \"Password Reset Policy Contract\",\n                \"value\": \"\"\n            },\n            {\n                \"name\": \"Account Unlock\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"Local Identity Profile\",\n                \"value\": \"regIdentityProfile\"\n            },\n            {\n                \"name\": \"Notification Publisher\",\n                \"value\": \"\"\n            },\n            {\n                \"name\": \"Enable Username Recovery\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"Login Template\",\n                \"value\": \"html.form.login.template.html\"\n            },\n            {\n                \"name\": \"Logout Path\",\n                \"value\": \"\"\n            },\n            {\n                \"name\": \"Logout Redirect\",\n                \"value\": \"\"\n            },\n            {\n                \"name\": \"Logout Template\",\n                \"value\": \"idp.logout.success.page.template.html\"\n            },\n            {\n                \"name\": \"Change Password Template\",\n                \"value\": \"html.form.change.password.template.html\"\n            },\n            {\n                \"name\": \"Change Password Message Template\",\n                \"value\": \"html.form.message.template.html\"\n            },\n            {\n                \"name\": \"Password Management System Message Template\",\n                \"value\": \"html.form.message.template.html\"\n            },\n            {\n                \"name\": \"Change Password Email Template\",\n                \"value\": \"message-template-end-user-password-change.html\"\n            },\n            {\n                \"name\": \"Expiring Password Warning Template\",\n                \"value\": \"html.form.password.expiring.notification.template.html\"\n            },\n            {\n                \"name\": \"Threshold for Expiring Password Warning\",\n                \"value\": \"7\"\n            },\n            {\n                \"name\": \"Snooze Interval for Expiring Password Warning\",\n                \"value\": \"24\"\n            },\n            {\n                \"name\": \"Login Challenge Template\",\n                \"value\": \"html.form.login.challenge.template.html\"\n            },\n            {\n                \"name\": \"'Remember My Username' Lifetime\",\n                \"value\": \"30\"\n            },\n            {\n                \"name\": \"'This is My Device' Lifetime\",\n                \"value\": \"30\"\n            },\n            {\n                \"name\": \"Allow Username Edits During Chaining\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"Track Authentication Time\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"Post-Password Change Re-Authentication Delay\",\n                \"value\": \"0\"\n            },\n            {\n                \"name\": \"Password Reset Username Template\",\n                \"value\": \"forgot-password.html\"\n            },\n            {\n                \"name\": \"Password Reset Code Template\",\n                \"value\": \"forgot-password-resume.html\"\n            },\n            {\n                \"name\": \"Password Reset Template\",\n                \"value\": \"forgot-password-change.html\"\n            },\n            {\n                \"name\": \"Password Reset Error Template\",\n                \"value\": \"forgot-password-error.html\"\n            },\n            {\n                \"name\": \"Password Reset Success Template\",\n                \"value\": \"forgot-password-success.html\"\n            },\n            {\n                \"name\": \"Account Unlock Template\",\n                \"value\": \"account-unlock.html\"\n            },\n            {\n                \"name\": \"OTP Length\",\n                \"value\": \"8\"\n            },\n            {\n                \"name\": \"OTP Time to Live\",\n                \"value\": \"10\"\n            },\n            {\n                \"name\": \"PingID Properties\",\n                \"value\": \"\"\n            },\n            {\n                \"name\": \"Require Verified Email\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"Username Recovery Template\",\n                \"value\": \"username.recovery.template.html\"\n            },\n            {\n                \"name\": \"Username Recovery Info Template\",\n                \"value\": \"username.recovery.info.template.html\"\n            },\n            {\n                \"name\": \"Username Recovery Email Template\",\n                \"value\": \"message-template-username-recovery.html\"\n            },\n            {\n                \"name\": \"CAPTCHA for Authentication\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"CAPTCHA for Password change\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"CAPTCHA for Password Reset\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"CAPTCHA for Username recovery\",\n                \"value\": \"false\"\n            }\n        ]\n    },\n    \"attributeContract\": {\n        \"coreAttributes\": [\n            {\n                \"name\": \"policy.action\",\n                \"masked\": false,\n                \"pseudonym\": false\n            },\n            {\n                \"name\": \"username\",\n                \"masked\": false,\n                \"pseudonym\": true\n            }\n        ],\n        \"extendedAttributes\": [\n            {\n                \"name\": \"entryUUID\",\n                \"masked\": false,\n                \"pseudonym\": false\n            },\n            {\n                \"name\": \"mail\",\n                \"masked\": false,\n                \"pseudonym\": false\n            },\n            {\n                \"name\": \"uid\",\n                \"masked\": false,\n                \"pseudonym\": false\n            }\n        ],\n        \"maskOgnlValues\": false\n    },\n    \"attributeMapping\": {\n        \"attributeSources\": [],\n        \"attributeContractFulfillment\": {\n            \"entryUUID\": {\n                \"source\": {\n                    \"type\": \"ADAPTER\"\n                },\n                \"value\": \"entryUUID\"\n            },\n            \"mail\": {\n                \"source\": {\n                    \"type\": \"ADAPTER\"\n                },\n                \"value\": \"mail\"\n            },\n            \"uid\": {\n                \"source\": {\n                    \"type\": \"ADAPTER\"\n                },\n                \"value\": \"uid\"\n            },\n            \"policy.action\": {\n                \"source\": {\n                    \"type\": \"ADAPTER\"\n                },\n                \"value\": \"policy.action\"\n            },\n            \"username\": {\n                \"source\": {\n                    \"type\": \"ADAPTER\"\n                },\n                \"value\": \"username\"\n            }\n        },\n        \"issuanceCriteria\": {\n            \"conditionalCriteria\": []\n        }\n    }\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/idp/adapters",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"idp",
												"adapters"
											]
										},
										"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=fjx1564003007321.html"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Create HTML Form (Internal Use)",
							"item": [
								{
									"name": "Create LIP - Admin Identity Profile",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Admin LIP Created\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"type": "text",
												"value": "PingFederate"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"adminIdentityProfile\",\n    \"name\": \"Admin Identity Profile\",\n    \"apcId\": {\n        \"id\": \"samplePolicyContract\"\n    },\n    \"authSources\": [\n        {\n            \"source\": \"SecurityKey\",\n            \"id\": \"SecurityKey\"\n        },\n        {\n            \"source\": \"FIDO\",\n            \"id\": \"FIDO\"\n        }\n    ],\n    \"authSourceUpdatePolicy\": {\n        \"storeAttributes\": false,\n        \"retainAttributes\": false,\n        \"updateAttributes\": false,\n        \"updateInterval\": 0.0\n    },\n    \"fieldConfig\": {\n        \"fields\": [\n            {\n                \"type\": \"TEXT\",\n                \"id\": \"fullName\",\n                \"label\": \"Full Name\",\n                \"registrationPageField\": false,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": false,\n                    \"Unique ID Field\": false,\n                    \"Mask Log Values\": false\n                },\n                \"defaultValue\": \"\"\n            },\n            {\n                \"type\": \"TEXT\",\n                \"id\": \"firstName\",\n                \"label\": \"First Name\",\n                \"registrationPageField\": false,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": false,\n                    \"Unique ID Field\": false,\n                    \"Mask Log Values\": false\n                },\n                \"defaultValue\": \"\"\n            },\n            {\n                \"type\": \"TEXT\",\n                \"id\": \"lastName\",\n                \"label\": \"Last Name\",\n                \"registrationPageField\": false,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": false,\n                    \"Unique ID Field\": false,\n                    \"Mask Log Values\": false\n                },\n                \"defaultValue\": \"\"\n            },\n            {\n                \"type\": \"EMAIL\",\n                \"id\": \"email\",\n                \"label\": \"Email Address\",\n                \"registrationPageField\": false,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": true,\n                    \"Unique ID Field\": false,\n                    \"Mask Log Values\": false\n                }\n            },\n            {\n                \"type\": \"PHONE\",\n                \"id\": \"phoneNumber\",\n                \"label\": \"Phone Number\",\n                \"registrationPageField\": false,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": false,\n                    \"Unique ID Field\": false,\n                    \"Mask Log Values\": false\n                }\n            },\n            {\n                \"type\": \"TEXT\",\n                \"id\": \"username\",\n                \"label\": \"Username\",\n                \"registrationPageField\": false,\n                \"profilePageField\": true,\n                \"attributes\": {\n                    \"Read-Only\": false,\n                    \"Required\": true,\n                    \"Unique ID Field\": true,\n                    \"Mask Log Values\": false\n                },\n                \"defaultValue\": \"\"\n            }\n        ],\n        \"stripSpaceFromUniqueField\": true\n    },\n    \"emailVerificationConfig\": {\n        \"emailVerificationEnabled\": false\n    },\n    \"dataStoreConfig\": {\n        \"type\": \"LDAP\",\n        \"dataStoreRef\": {\n            \"id\": \"LDAP-PingDirectory\"\n        },\n        \"baseDn\": \"ou=Administrators,{{userBaseDN}}\",\n        \"dataStoreMapping\": {\n            \"firstName\": {\n                \"type\": \"LDAP\",\n                \"name\": \"givenName\",\n                \"metadata\": {}\n            },\n            \"lastName\": {\n                \"type\": \"LDAP\",\n                \"name\": \"sn\",\n                \"metadata\": {}\n            },\n            \"phoneNumber\": {\n                \"type\": \"LDAP\",\n                \"name\": \"mobile\",\n                \"metadata\": {}\n            },\n            \"fullName\": {\n                \"type\": \"LDAP\",\n                \"name\": \"cn\",\n                \"metadata\": {}\n            },\n            \"email\": {\n                \"type\": \"LDAP\",\n                \"name\": \"mail\",\n                \"metadata\": {}\n            },\n            \"username\": {\n                \"type\": \"LDAP\",\n                \"name\": \"uid\",\n                \"metadata\": {}\n            }\n        }\n    },\n    \"profileConfig\": {\n        \"deleteIdentityEnabled\": false,\n        \"templateName\": \"local.identity.profile.html\"\n    },\n    \"registrationEnabled\": false,\n    \"profileEnabled\": true\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/localIdentity/identityProfiles",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"localIdentity",
												"identityProfiles"
											]
										},
										"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=mvi1564003006379.html"
									},
									"response": []
								},
								{
									"name": "Create Adapter - HTML Form",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"HTML Form Adapter Created\", function () {",
													"    pm.response.to.have.status(\"Created\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-XSRF-Header",
												"type": "text",
												"value": "PingFederate"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"HTMLForm\",\n  \"name\": \"Employee HTML Form\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.adapters.htmlform.idp.HtmlFormIdpAuthnAdapter\"\n  },\n  \"configuration\": {\n    \"tables\": [\n      {\n        \"name\": \"Credential Validators\",\n        \"rows\": [\n          {\n            \"fields\": [\n              {\n                \"name\": \"Password Credential Validator Instance\",\n                \"value\": \"PDPCV\"\n              }\n            ],\n            \"defaultRow\": false\n          }\n        ]\n      }\n    ],\n    \"fields\": [\n      {\n        \"name\": \"Challenge Retries\",\n        \"value\": \"3\"\n      },\n      {\n        \"name\": \"Session State\",\n        \"value\": \"None\"\n      },\n      {\n        \"name\": \"Session Timeout\",\n        \"value\": \"60\"\n      },\n      {\n        \"name\": \"Session Max Timeout\",\n        \"value\": \"480\"\n      },\n      {\n        \"name\": \"Allow Password Changes\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Password Management System\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Enable 'Remember My Username'\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Enable 'This is My Device'\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Change Password Email Notification\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Show Password Expiring Warning\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Password Reset Type\",\n        \"value\": \"NONE\"\n      },\n      {\n        \"name\": \"Password Reset Policy Contract\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Account Unlock\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Local Identity Profile\",\n        \"value\": \"adminIdentityProfile\"\n      },\n      {\n        \"name\": \"Notification Publisher\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Enable Username Recovery\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Login Template\",\n        \"value\": \"html.form.login.template.html\"\n      },\n      {\n        \"name\": \"Logout Path\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Logout Redirect\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Logout Template\",\n        \"value\": \"idp.logout.success.page.template.html\"\n      },\n      {\n        \"name\": \"Change Password Template\",\n        \"value\": \"html.form.change.password.template.html\"\n      },\n      {\n        \"name\": \"Change Password Message Template\",\n        \"value\": \"html.form.message.template.html\"\n      },\n      {\n        \"name\": \"Password Management System Message Template\",\n        \"value\": \"html.form.message.template.html\"\n      },\n      {\n        \"name\": \"Change Password Email Template\",\n        \"value\": \"message-template-end-user-password-change.html\"\n      },\n      {\n        \"name\": \"Expiring Password Warning Template\",\n        \"value\": \"html.form.password.expiring.notification.template.html\"\n      },\n      {\n        \"name\": \"Threshold for Expiring Password Warning\",\n        \"value\": \"7\"\n      },\n      {\n        \"name\": \"Snooze Interval for Expiring Password Warning\",\n        \"value\": \"24\"\n      },\n      {\n        \"name\": \"Login Challenge Template\",\n        \"value\": \"html.form.login.challenge.template.html\"\n      },\n      {\n        \"name\": \"'Remember My Username' Lifetime\",\n        \"value\": \"30\"\n      },\n      {\n        \"name\": \"'This is My Device' Lifetime\",\n        \"value\": \"30\"\n      },\n      {\n        \"name\": \"Allow Username Edits During Chaining\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Track Authentication Time\",\n        \"value\": \"true\"\n      },\n      {\n        \"name\": \"Post-Password Change Re-Authentication Delay\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"Password Reset Username Template\",\n        \"value\": \"forgot-password.html\"\n      },\n      {\n        \"name\": \"Password Reset Code Template\",\n        \"value\": \"forgot-password-resume.html\"\n      },\n      {\n        \"name\": \"Password Reset Template\",\n        \"value\": \"forgot-password-change.html\"\n      },\n      {\n        \"name\": \"Password Reset Error Template\",\n        \"value\": \"forgot-password-error.html\"\n      },\n      {\n        \"name\": \"Password Reset Success Template\",\n        \"value\": \"forgot-password-success.html\"\n      },\n      {\n        \"name\": \"Account Unlock Template\",\n        \"value\": \"account-unlock.html\"\n      },\n      {\n        \"name\": \"OTP Length\",\n        \"value\": \"8\"\n      },\n      {\n        \"name\": \"OTP Time to Live\",\n        \"value\": \"10\"\n      },\n      {\n        \"name\": \"PingID Properties\",\n        \"value\": \"\"\n      },\n      {\n        \"name\": \"Require Verified Email\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Username Recovery Template\",\n        \"value\": \"username.recovery.template.html\"\n      },\n      {\n        \"name\": \"Username Recovery Info Template\",\n        \"value\": \"username.recovery.info.template.html\"\n      },\n      {\n        \"name\": \"Username Recovery Email Template\",\n        \"value\": \"message-template-username-recovery.html\"\n      },\n      {\n        \"name\": \"CAPTCHA for Authentication\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"CAPTCHA for Password change\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"CAPTCHA for Password Reset\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"CAPTCHA for Username recovery\",\n        \"value\": \"false\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [\n      {\n        \"name\": \"policy.action\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"username\",\n        \"masked\": false,\n        \"pseudonym\": true\n      }\n    ],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"entryUUID\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"uid\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"mail\",\n        \"masked\": false,\n        \"pseudonym\": false\n      }\n    ],\n    \"maskOgnlValues\": false\n  },\n  \"attributeMapping\": {\n    \"attributeSources\": [],\n    \"attributeContractFulfillment\": {\n      \"entryUUID\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"entryUUID\"\n      },\n      \"uid\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"uid\"\n      },\n      \"mail\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"mail\"\n      },\n      \"policy.action\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"policy.action\"\n      },\n      \"username\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"username\"\n      }\n    },\n    \"issuanceCriteria\": {\n      \"conditionalCriteria\": []\n    }\n  }\n}"
										},
										"url": {
											"raw": "{{pfAdminURL}}/pf-admin-api/v1/idp/adapters",
											"host": [
												"{{pfAdminURL}}"
											],
											"path": [
												"pf-admin-api",
												"v1",
												"idp",
												"adapters"
											]
										},
										"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=dri1564003022949.html"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Create Adapter - Identifier First",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Adapter Created\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-XSRF-Header",
										"type": "text",
										"value": "PingFederate"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"IDFirst\",\n  \"name\": \"Identifier-First\",\n  \"pluginDescriptorRef\": {\n    \"id\": \"com.pingidentity.adapters.identifierfirst.idp.IdentifierFirstAdapter\"\n  },\n  \"configuration\": {\n    \"tables\": [],\n    \"fields\": [\n      {\n        \"name\": \"Identifier Cookie Lifetime\",\n        \"value\": \"30\"\n      },\n      {\n        \"name\": \"Allow Cancelling Identifier Selection\",\n        \"value\": \"false\"\n      },\n      {\n        \"name\": \"Maximum Identifiers Count\",\n        \"value\": \"5\"\n      },\n      {\n        \"name\": \"Identifier Selection Template\",\n        \"value\": \"identifier.first.template.html\"\n      }\n    ]\n  },\n  \"attributeContract\": {\n    \"coreAttributes\": [\n      {\n        \"name\": \"subject\",\n        \"masked\": false,\n        \"pseudonym\": true\n      },\n      {\n        \"name\": \"domain\",\n        \"masked\": false,\n        \"pseudonym\": false\n      }\n    ],\n    \"extendedAttributes\": [\n      {\n        \"name\": \"entryUUID\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"uid\",\n        \"masked\": false,\n        \"pseudonym\": false\n      },\n      {\n        \"name\": \"mail\",\n        \"masked\": false,\n        \"pseudonym\": false\n      }\n    ],\n    \"maskOgnlValues\": false\n  },\n  \"attributeMapping\": {\n    \"attributeSources\": [\n      {\n        \"type\": \"LDAP\",\n        \"dataStoreRef\": {\n          \"id\": \"LDAP-PingDirectory\"\n        },\n        \"id\": \"PD\",\n        \"description\": \"PD\",\n        \"baseDn\": \"{{userBaseDN}}\",\n        \"searchScope\": \"SUBTREE\",\n        \"searchFilter\": \"(|(uid=${subject} )(mail=${subject}))\",\n        \"binaryAttributeSettings\": {},\n        \"memberOfNestedGroup\": false\n      }\n    ],\n    \"attributeContractFulfillment\": {\n      \"entryUUID\": {\n        \"source\": {\n          \"type\": \"LDAP_DATA_STORE\",\n          \"id\": \"PD\"\n        },\n        \"value\": \"entryUUID\"\n      },\n      \"uid\": {\n        \"source\": {\n          \"type\": \"LDAP_DATA_STORE\",\n          \"id\": \"PD\"\n        },\n        \"value\": \"uid\"\n      },\n      \"mail\": {\n        \"source\": {\n          \"type\": \"LDAP_DATA_STORE\",\n          \"id\": \"PD\"\n        },\n        \"value\": \"mail\"\n      },\n      \"subject\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"subject\"\n      },\n      \"domain\": {\n        \"source\": {\n          \"type\": \"ADAPTER\"\n        },\n        \"value\": \"domain\"\n      }\n    },\n    \"issuanceCriteria\": {\n      \"conditionalCriteria\": []\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{pfAdminURL}}/pf-admin-api/v1/idp/adapters",
									"host": [
										"{{pfAdminURL}}"
									],
									"path": [
										"pf-admin-api",
										"v1",
										"idp",
										"adapters"
									]
								},
								"description": "https://docs.pingidentity.com/csh?Product=pf-latest&topicname=iek1564003022460.html"
							},
							"response": []
						}
					],
					"description": "Calls that create the IdP Components:\n\n* Default Identity Profile (with Profile Management)\n* HTML Form Adapter (with Local Identity Profile and SSPR)\n* HTML Form (Used for Administrator-Facing AuthN - Delegator \\ PingCentral \\ etc)\n* Identifier-First Adapter\n* Authentication API Application\n * Defaults to PF API Explorer\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "{{pfAdminPwd}}",
						"type": "string"
					},
					{
						"key": "username",
						"value": "{{pfAdmin}}",
						"type": "string"
					},
					{
						"key": "saveHelperData",
						"value": true,
						"type": "boolean"
					},
					{
						"key": "showPassword",
						"value": false,
						"type": "boolean"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var excludeStatus = [200, 201]",
					"if (pm.variables.get(\"apiLog\").toLowerCase() == \"debug\") {",
					"    console.log(pm.response.json());",
					"}",
					"else if (!excludeStatus.includes(pm.response.code)) {",
					"    console.log(\"Request: \", JSON.stringify(JSON.parse(pm.request.body)));",
					"    console.log(\"----------\")",
					"    console.log(\"Response: \", pm.response.json());",
					"};"
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiLog",
			"value": "debug"
		},
		{
			"key": "pfAdmin",
			"value": "api-admin"
		},
		{
			"key": "pfAdminPwd",
			"value": "{{globalPwd}}"
		},
		{
			"key": "globalPwd",
			"value": "2FederateM0re"
		},
		{
			"key": "pdAdmin",
			"value": "cn=administrator"
		},
		{
			"key": "pdAdminPwd",
			"value": "{{globalPwd}}"
		},
		{
			"key": "userBaseDN",
			"value": "dc=sampleciam.com"
		},
		{
			"key": "pdLdapHost",
			"value": "pingdirectory"
		},
		{
			"key": "pfAuthnApiUrl",
			"value": "{{pfBaseURL}}/pf-ws/authn/explorer"
		}
	]
}